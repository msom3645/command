{\rtf1\ansi\ansicpg1251\deff0\nouicompat\deflang1049{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green255\blue255;\red255\green255\blue0;}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\sl276\slmult1\highlight1\f0\fs16\lang9\par
  "scripts": \{\par
    "start": "nodemon ./src/index.server.js"\par
  \},\par
  "author": "",\par
  "license": "ISC",\par
  "dependencies": \{\par
    "bcrypt": "^5.0.0",\par
    "body-parser": "^1.19.0",\par
    "dotenv": "^8.2.0",\par
    "express": "^4.17.1",\par
    "express-validator": "^6.8.0",\par
    "jsonwebtoken": "^8.5.1",\par
    "mongoose": "^5.11.8"\par
  \},\par
\highlight2\par
backend=>src=>index.server.js\par
\par
\highlight0 const express = require('express')\par
const app = express()\par
const mongoose = require('mongoose')\par
const env = require('dotenv').config()\par
const bodyParser = require('body-parser')\par
\par
const authRoutes = require('./routes/auth')\par
const adminRoutes = require('./routes/admin/auth')\par
\par
mongoose.connect(`mongodb+srv://$\{process.env.MONGO_DB_USER\}:$\{process.env.MONGO_DB_PASSWORD\}@cluster0.1qlda.mongodb.net/$\{process.env.MONGO_DB_DATABASE\}?retryWrites=true&w=majority`, \{\par
    useNewUrlParser: true,\par
     useUnifiedTopology: true,\par
     useCreateIndex: true\par
    \})\par
     .then(()=>console.log('Database connected'));\par
\par
app.use(bodyParser())\par
\par
app.use('/api', authRoutes)\par
app.use('/api', adminRoutes)\par
\par
\par
app.listen(process.env.PORT, () =>\{\par
    console.log(`Server is running on port $\{process.env.PORT\}`)\par
\})\highlight2\par
backend/.env\par
\highlight0 PORT = 2000\par
MONGO_DB_USER = root\par
MONGO_DB_PASSWORD = 111333qq\par
MONGO_DB_DATABASE = ecommerce\par
JWT_SECRET = MERNSECRET\par
\par
\highlight2 backend/src/controller/auth.js\par
\par
\highlight0 const User = require('../models/user')\par
const jwt = require('jsonwebtoken')\par
\b exports.signup = (req, res) => \{\par
\b0     User.findOne(\{email: req.body.email\})\par
    .exec((error, user)=>\{\par
        if(user) return res.status(400).json(\{\par
            message: 'User already registered'\par
        \})\par
        const \{\par
            firstName,\par
            lastName,\par
            email,\par
            password\par
        \} = req.body\par
        const _user = new User(\{\par
            firstName,\par
            lastName,\par
            email,\par
            password,\par
            username: Math.random().toString(),\par
        \})\par
\par
        _user.save((error, data) => \{\par
            if(error)\{\par
                return res.status(400).json(\{\par
                    message: 'Something wrong'\par
                \})\par
            \}\par
\par
            if(data)\{\par
                return res.status(201).json(\{\par
                    message: 'User Created Successfuly!'\par
                \})\par
            \}\par
        \})\par
    \})\par
\}\par
\par
\b exports.signin = (req, res) => \{\par
\b0     User.findOne(\{email: req.body.email\})\par
    .exec((error, user) => \{\par
        if(error) return res.status(400).json(\{error\})\par
\par
        if(user)\{\par
            if(user.authenticate(req.body.password))\{\par
                const token = jwt.sign(\{_id: user._id\}, process.env.JWT_SECRET, \{ expiresIn: '1h'\} )\par
                const \{ _id, firstName, lastName, email, role, fullName \} = user;\par
                res.status(200).json(\{\par
                    token,\par
                    user: \{\par
                        _id, firstName, lastName, email, role, fullName\par
                    \}\par
                \})\par
            \}else\{\par
                return res.status(400).json(\{\par
                    message: 'Invalid Password'\par
                \})\par
            \}\par
        \}else\{\par
            return res.status(400).json(\{message: 'Something went Wrong!!'\})\par
        \}\par
\par
    \} )\par
\}\par
\par
exports.requireSignin = (req, res, next) => \{\par
    const token = req.headers.authenticate.split(" ")[1]\par
    const user = jwt.verify(token, process.env.JWT_SECRET)\par
    req.user = user\par
    next()\par
    // jwt.decode()\par
\}\par
\highlight2\par
\par
\par
backend/src/controller/admin/auth.js\par
\highlight0 const User = require('../../models/user')\par
const jwt = require('jsonwebtoken')\par
exports.signup = (req, res) => \{\par
    User.findOne(\{email: req.body.email\})\par
    .exec((error, user)=>\{\par
        if(user) return res.status(400).json(\{\par
            message: 'Admin already registered'\par
        \})\par
        const \{\par
            firstName,\par
            lastName,\par
            email,\par
            password\par
        \} = req.body\par
        const _user = new User(\{\par
            firstName,\par
            lastName,\par
            email,\par
            password,\par
            username: Math.random().toString(),\par
            role: 'admin'\par
        \})\par
\par
        _user.save((error, data) => \{\par
            if(error)\{\par
                return res.status(400).json(\{\par
                    message: 'Something wrong'\par
                \})\par
            \}\par
\par
            if(data)\{\par
                return res.status(201).json(\{\par
                    message: 'Admin Created Successfuly!'\par
                \})\par
            \}\par
        \})\par
    \})\par
\}\par
\par
\par
exports.signin = (req, res) => \{\par
    User.findOne(\{email: req.body.email\})\par
    .exec((error, user) => \{\par
        if(error) return res.status(400).json(\{error\})\par
\par
        if(user)\{\par
            if(user.authenticate(req.body.password) && user.role === 'admin' )\{\par
                const token = jwt.sign(\{_id: user._id\}, process.env.JWT_SECRET, \{ expiresIn: '1h'\} )\par
                const \{ _id, firstName, lastName, email, role, fullName \} = user;\par
                res.status(200).json(\{\par
                    token,\par
                    user: \{\par
                        _id, firstName, lastName, email, role, fullName\par
                    \}\par
                \})\par
            \}else\{\par
                return res.status(400).json(\{\par
                    message: 'Invalid Password'\par
                \})\par
            \}\par
\par
\par
        \}else\{\par
            return res.status(400).json(\{message: 'Something went Wrong!!'\})\par
        \}\par
\par
    \} )\par
\}\par
\par
exports.requireSignin = (req, res, next) => \{\par
    const token = req.headers.authenticate.split(" ")[1]\par
    const user = jwt.verify(token, process.env.JWT_SECRET)\par
    req.user = user\par
    next()\par
    // jwt.decode()\par
\}\par
\highlight2\par
backend/src/routes/auth.js\par
\highlight0 const express = require('express');\par
const router = express.Router()\par
const \{ signup, signin, requireSignin \} = require('../controller/auth');\par
\par
router.post('/signin',signin )\par
router.post('/signup', signup)\par
\par
module.exports = router;\par
\highlight2 backend/src/routes/admin/auth.js\par
\highlight0 const express = require('express');\par
const router = express.Router()\par
const \{ signup, signin, requireSignin \} = require('../../controller/admin/auth');\par
\par
router.post('/admin/signin',signin )\par
router.post('/admin/signup', signup)\par
module.exports = router;\par
\highlight2\par
backend/src/models/user.js\par
\highlight0 const mongoose = require('mongoose')\par
const bcrypt = require('bcrypt')\par
\par
const userSchema = new mongoose.Schema(\{\par
    firstName: \{\par
        type: String,\par
        required:true,\par
        trim: true,\par
        min:3,\par
        max:20\par
    \},\par
    lastName: \{\par
        type: String,\par
        required:true,\par
        trim: true,\par
        min:3,\par
        max:20\par
    \},\par
    username: \{\par
        type: String,\par
        requred: true,\par
        trim: true,\par
        unique: true,\par
        index:true,\par
        lowercase: true\par
    \},\par
    email: \{\par
        type: String,\par
        required: true,\par
        trim: true,\par
        unique: true,\par
        lowercase: true\par
    \},\par
    hash_password: \{\par
        type: String,\par
        required: true\par
    \},\par
    role: \{\par
        type: String,\par
        enum: ['user', 'admin'],\par
        default:'user'\par
    \},\par
    contactNumber: \{type: String\},\par
    profilePicture: \{type: String\},\par
\par
\par
\}, \{timestamps: true\})\par
\par
\par
userSchema.virtual('password')\par
.set(function(password)\{\par
    this.hash_password = bcrypt.hashSync(password, 10)\par
\})\par
\par
userSchema.virtual('fullName')\par
.get(function()\{\par
    return `$\{this.firstName\} $\{this.lastName\} `\par
\})\par
\par
userSchema.methods = \{\par
    authenticate: function(password)\{\par
        return bcrypt.compareSync(password, this.hash_password)\par
    \}\par
\}\par
\par
module.exports = mongoose.model('User', userSchema)\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\highlight2\par
\highlight0\par
\par
\par
\par
\par
\par
}
 