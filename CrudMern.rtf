{\rtf1\ansi\ansicpg1251\deff0\nouicompat\deflang1049{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red255\green255\blue0;\red0\green0\blue255;\red255\green0\blue0;\red0\green255\blue255;\red255\green0\blue255;}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\sl240\slmult1\highlight1\f0\fs16\lang1033 crud1/server/index.js\par
\highlight0 const express = require('express')\par
const app = express()\par
const cors = require('cors')\par
app.use(cors())\par
app.use(express.json())\par
// app.get('/', (req, res)=> \{\par
//     res.send('jjj')\par
// \})\par
app.post('/data', (req, res)=> \{\par
    console.log(req.body.name)\par
\})\par
app.listen(5000, console.log('server runing on port 5000'))\par
\highlight1 frontend/app.js\par
\highlight0 import React, \{useState, useEffect\} from 'react'\par
import axios from 'axios'\par
const HomeScreen = () => \{\par
    const [name, setName] = useState()\par
    const send = () => \{\par
        axios.post('{{\field{\*\fldinst{HYPERLINK http://localhost:5000/data }}{\fldrslt{http://localhost:5000/data\ul0\cf0}}}}\f0\fs16 ', \{name\})\par
    \}\par
    return (\par
        <div>\par
            <input onChange=\{e=> setName(e.target.value)\} />\par
            <button onClick=\{send\}>Send</button>\par
        </div>\par
    )\par
\}\par
export default HomeScreen\par
\highlight3\b\fs28\lang9\par
\par
ALGORITM\highlight1\b0\fs16\par
\lang1033 crud1/server/index.js\par
\highlight0 const express = require('express')\par
const cors = require('cors')\par
const connectDB = require('./config/db')\par
const router = require('./routes/userRoutes')\par
const dotenv = require('dotenv')\par
const app = express()\par
dotenv.config()\par
app.use(express.json())\par
app.use(cors())\par
connectDB()\par
app.get('/', (req, res)=>\{\par
    res.send('hello')\par
\})\par
app.use(router)\par
app.listen(3001, console.log('server running on port 8080'))\par
\highlight1 crud1/server/routes/userRoutes\par
\highlight0 const express = require('express')\par
const router = express.Router()\par
const User = require('../models/userModel')\par
\b\fs20 router.\fs24 post\fs20 ('/insert', async(req, res) =>\{\par
\b0\fs16     const name = req.body.name\par
    const email = req.body.email\par
    try\{\par
        const user = await User.create(\{name, email\})\par
    \}catch(error)\{\par
        console.log(error)\par
    \}\par
\} )\par
module.exports= router\par
\highlight1 App.js\par
\highlight0\lang9 import React, \{useState, useEffect\} from 'react'\par
import axios from 'axios'\par
const App = () => \{\par
  const [name, setName] = useState('')\par
  const [email, setEmail] = useState('')\par
  const submitButton = () =>\{\par
\b\fs20        axios.post("{{\field{\*\fldinst{HYPERLINK http://127.0.0.1:3001/insert }}{\fldrslt{http://127.0.0.1:3001/insert\ul0\cf0}}}}\f0\fs20 ", \{name, email\})\par
\b0\fs16   \}\par
  return (\par
    <div>\par
      <input placeholder ='name...' type='text' onChange=\{e=>setName(e.target.value)\}/>\par
      <input placeholder ='email...' type='email' onChange=\{e=>setEmail(e.target.value)\}/>\par
      <button onClick=\{submitButton\} >Add</button>\par
    </div>\par
  )\par
\}\par
export default App\par
\highlight1\par
\par
\par
\highlight3 ====================================================================================================\highlight1\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=wnfjx65aQTw }}{\fldrslt{https://www.youtube.com/watch?v=wnfjx65aQTw\ul0\cf0}}}}\f0\fs16\lang1033\par
\highlight0\par
\par
\highlight1 crud1/client\par
\highlight4 npx create-react-app .\par
\highlight1 crud1/client/src/App.js\par
\highlight0 import './App.css';\par
import React, \{useState, useEffect\} from 'react'\par
import axios from 'axios'\par
\par
function App() \{\par
  const [name, setName] = useState('')\par
  const [days, setDays] = useState(0)\par
  const [foodList, setFoodList] = useState([])\par
  const [newName, setNewName] = useState('')\par
\par
useEffect(()=>\{\par
\highlight5 axios.get('{{\field{\*\fldinst{HYPERLINK http://localhost:5000/read').then((response)= }}{\fldrslt{http://localhost:5000/read').then((response)=\ul0\cf0}}}}\f0\fs16 >\{\par
\highlight0   setFoodList(response.data)\par
\})\par
\}, [])\par
\par
  const addToList = () => \{\par
\highlight5     axios.post("{{\field{\*\fldinst{HYPERLINK http://localhost:5000/insert }}{\fldrslt{http://localhost:5000/insert\ul0\cf0}}}}\f0\fs16 ", \{name, days\})\par
\highlight0   \}\par
  const updateFood = (id) =>\{\par
\highlight5       axios.put("{{\field{\*\fldinst{HYPERLINK http://localhost:5000/update }}{\fldrslt{http://localhost:5000/update\ul0\cf0}}}}\f0\fs16 ", \{id:id, newName:newName\})\par
\highlight0   \}\par
\par
  const deleteFood = (id) => \{\par
\highlight5     axios.delete(`http://localhost:5000/delete/$\{id\}`)\par
\highlight0   \}\par
\par
\par
  return (\par
    <div className="App">\par
        <h1>CRUD App with MERN</h1>\par
        <label>Food Name</label>\par
        <input type='text' onChange=\{e=> setName(e.target.value)\} />\par
        <label>Days since you Ate It</label>\par
        <input type='number' onChange = \{e => setDays(e.target.value)\} />\par
        <button onClick=\{addToList\} >  Add To List</button>\par
        \{foodList.map((val, key)=>\{\par
          return (\par
            <div key=\{key\} >\par
              <h3>\{val.foodName\}</h3>\par
              <h3>\{val.daysSinceIAte\}</h3>\par
              <input type='text' placeholder='New Food Name...'/>\par
              <input type='text' placeholder='update' onChange=\{e=>setNewName(e.target.value)\}/>\par
              <button onClick=\{()=> updateFood(val._id)\} > Update</button>\par
              <button onClick=\{()=>deleteFood(val._id)\} > Delete</button>\par
            </div>\par
          )\par
        \})\}\par
    </div>\par
  );\par
\}\par
export default App;\highlight4\par
\highlight1 crud1/server/index.js\par

\pard\sl276\slmult1\highlight0 const express = require('express')\par
const app = express()\par
const mongoose = require('mongoose')\par
app.use(express.json())\par
const cors = require('cors')\par
app.use(cors())\par
const FoodModel = require('./models/Food')\par
mongoose.connect('mongodb+srv://user1:111333qq@clustercrud.5ldyl.mongodb.net/clustercrud?retryWrites=true&w=majority',\par
\{ useNewUrlParser: true, useUnifiedTopology: true\}\par
)\par
app.\highlight5 post\highlight0 ("/insert", async(req, res)=> \{\par
    const name = req.body.name\par
    const days = req.body.days\par
    const food = new FoodModel( \{foodName:name, daysSinceIAte: days\})\par
try\{\par
        await food.save()\par
    \} catch(err)\{\par
        console.log(err)\par
    \}\par
\})\par
\par
app.\highlight5 get\highlight0 ('/read', async(req, res) => \{\par
    await FoodModel.find(\{\}, (err, result) =>\{\par
        if (err) \{\par
            res.send(err)\par
        \}\par
        res.send(result)\par
    \})\par
\})\par
app.\highlight5 put\highlight0 ('/update', async(req, res) => \{\par
    const newName = req.body.newName\par
    const id = req.body.id\par
    try\{\par
       await FoodModel.findById(id, (err, updatedFood) => \{\par
            updatedFood.foodName = newName\par
            updatedFood.save()\par
            res.send('update')\par
        \})\par
    \}catch(err)\{\par
        console.log(err)\par
    \}\par
\})\par
app.\highlight5 delete\highlight0 ('/delete/:id', async(req, res)=>\{\par
    const id = req.params.id\par
    await FoodModel.findByIdAndRemove(id).exec()\par
    res.send('deleted')\par
\})\par
app.listen(5000, console.log('Server running on port 5000'))\par

\pard\sa200\sl276\slmult1\fs22 ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=vjf774RKrLc }}{\fldrslt{https://www.youtube.com/watch?v=vjf774RKrLc\ul0\cf0}}}}\f0\fs22              \highlight3\b DIRECT TO DATABASE\highlight0\b0\par

\pard\sl240\slmult1\highlight1\fs16 crud1/server/index.js\par
\highlight0 const express = require('express')\par
const mongoose = require('mongoose')\par
const app = express()\par
app.use(express.json())\par
\highlight1\par

\pard\sl276\slmult1\highlight5 app.post('/posts2', async(req, res) =>                                 \{\par
\highlight0     const post = new FoodModel(\{\par
        foodName: req.body.foodName,\par
        daysSinceIAte: req.body.daysSinceIAte\par
    \})\par
    try \{\par
        const savedPost = await post.save()\par
        res.json(savedPost)\par
    \} catch (err)\{\par
        res.json(\{message: err\})\par
    \}\par
\})\par
\par
\highlight5 app.get('/posts',async (req, res) => \{\par
\highlight0     try\{\par
        const posts = await FoodModel.find()\par
        res.json(posts)\par
    \}catch(err) \{\par
        res.json(\{message: err\})\par
    \}\par
\})\fs22\par
\highlight5\fs16 app.get('/posts/:id', async(req, res) => \{                                                      // GET POST BY ID\par
\highlight0     try\{\par
        const post = await FoodModel.findById(req.params.id)\par
        res.json(post)\par
    \}catch(err)\{\par
        res.json(\{message: err\})\par
    \}\par
\})\par
\highlight5 app.delete('/posts/:id', async (req, res)=>\{                                                       // DELETE \par
\highlight0     try \{\par
        const removedPost = await FoodModel.deleteOne(\{_id: req.params.id\})\par
        res.json(removedPost)\par
    \} catch (err) \{\par
        res.json(\{message: err\})\par
    \}\par
\})\par
\highlight5 app.patch('/posts/:id', async(req, res) => \{\par
\highlight0     try\{\par
        const updatedPost = await FoodModel.updateOne(\par
            \{_id: req.params.id\}, \{$set: \{foodName: req.body.foodName\}\})\par
            res.json(updatedPost)\par
    \}catch(err)\{\par
        res.json(\{message: err\})\par
    \}\par
\})\par
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\fs22\par

\pard\sa200\sl276\slmult1 {{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=2jqok-WgelI }}{\fldrslt{https://www.youtube.com/watch?v=2jqok-WgelI\ul0\cf0}}}}\f0\fs22    \highlight3\b AUTH\par
\highlight4 npm i @hapi/joi\par
\highlight0\b0\par

\pard\sl240\slmult1\highlight1\fs16 crud1/server/models/User.js/\par
\highlight0 const mongoose = require('mongoose')\par
const userSchema = new mongoose.Schema(\{\par
    name: \{\par
        type: String,\par
        required: true,\par
        min:6,\par
        max:225\par
    \},\par
    email:\{\par
        type: String,\par
        required: true,\par
        max: 255,\par
        min:6\par
    \}, password:\{\par
        type:String,\par
        required:true,\par
        max:255,\par
        min:6\par
    \}\par
\}, \{timestamps:true\})\par
module.exports = mongoose.model('User', userSchema)\par
\highlight1\par
crud1/server/index.js\par
\highlight0 const express = require('express')\par
const app = express()\par
const dotenv = require('dotenv')\par
const mongoose = require('mongoose')\par
const authRoute = require('./routes/auth')\par
dotenv.config()\par
app.use(express.json())\par
\par
mongoose.connect(process.env.DB_CONNECT,\par
\{ useNewUrlParser: true, useUnifiedTopology: true\}, console.log('mongoose connected!!')\par
)\par
app.use('/api/user', authRoute )\par
app.listen(5000, () => console.log('Server Up and running on port 5000'))\par
\highlight1\par
crud1/server/routes/auth.js\par
\highlight0 const router = require('express').Router()\par
const User = require('../models/User')\par
const bcrypt = require('bcryptjs')\par
const jwt = require('jsonwebtoken')\par
const verify = require('./verifyToken')\par
\par
const Joi = require('@hapi/joi');\par
const registerValidation = (data) => \{\par
    const schema = Joi.object(\{\par
        name: Joi.string().min(6).required(),\par
        email: Joi.string()\par
        .min(3)\par
        .required()\par
        .email(\{ minDomainSegments: 2, tlds: \{ allow: ['com', 'net'] \} \}),\par
        password: Joi.string().min(6).required(),\par
    \});\par
    return schema.validate(data);\par
\};\par
\b router.post('/register', async (req, res) => \{\par
\b0     const \{error\} = registerValidation(req.body)\par
    if (error) return res.status(400).send(error.details[0].message)\par
\par
    const emailExist= await User.findOne(\{email:req.body.email\})\par
    if (emailExist) return res.status(400).send('Email already exists')\par
\par
    const salt = await bcrypt.genSalt(10)\par
    const hashPassword = await bcrypt.hash(req.body.password, salt)\par
\par
    const user = new User(\{\par
        name: req.body.name,\par
        email: req.body.email,\par
        password: hashPassword\par
    \})\par
    try \{\par
        const savedUser = await user.save()\par
        res.send(\{user: user._id\})\par
    \}catch(err) \{\par
        res.status(400).send(err)\par
    \}\par
\})\par
\par
\b router.post('/login', async(req, res)=> \{\par
\b0     const user = await User.findOne(\{email:req.body.email\})\par
    if (!user) return res.status(400).send('Email is not found')\par
\par
    const validPass = await bcrypt.compare(req.body.password, user.password)\par
    if(!validPass) return res.status(400).send('Invalid Password')\par
    const token = jwt.sign(\{_id:user._id\}, process.env.TOKEN_SECRET)\par
    res.header('auth-token', token).send(token)\par
    res.send('Logged In!')    \par
\})\par
\par
\par
router.get('/posts',\highlight5 verify\highlight0 , (req, res)=>\{\par
    res.json(\{\par
        posts:\{\par
            title:"my first post",\par
            description:"random data .."\par
        \}\par
    \})\par
\})    \par
\par
module.exports = router\par
\highlight1\par
crud1/server/routes/verifyToken.js        \par
\highlight0 const jwt = require('\highlight5 jsonwebtoken\highlight0 ')                           // \highlight5 private\highlight0\par
module.exports = function (req, res, next)\{\par
    const token = req.header('auth-token')\par
    if(!token) return res.status(401).send('Access Denied')\par
    try \{\par
        const verified = jwt.verify(token, process.env.TOKEN_SECRET)\par
        req.user = verified\par
        next()\par
    \}catch(err)\{\par
        res.status(400).send('Invalid Token')\par
    \}\par
\}\par
\highlight1\par

\pard\sa200\sl276\slmult1\highlight0\fs22\par
\par
\par
\par
}
 