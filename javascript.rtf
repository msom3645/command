{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Fira Code Light;}}
{\colortbl ;\red255\green0\blue0;\red0\green255\blue255;\red0\green255\blue0;\red255\green255\blue0;\red0\green0\blue255;\red232\green191\blue106;\red0\green0\blue0;}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\box\brdrdash\brdrw0 \sl276\slmult1\cf1\highlight2\f0\fs16\-      if(inputText.trim().length>0)                input  validation\par
completed: !item.completed              toggle   true to false\par
\highlight3 console.log(window)\par
console.log(globalThis)\par
\highlight2 Object.getOwnPropertyNames(obj)\par
\highlight0 # Performance\highlight2\par
const s1 = performance.now()\par
const s2 = performance.now()\par
console.log(s1 -s2)\highlight3\par
\highlight0 # Errors\par
\cf0 const someError = () => \{\par
  throw new Error("Some Error");\par
\};\par
\par
try \{\par
  someError();\par
\} catch (e) \{\par
  console.log(e);\par
  console.log(e.message);\par
  console.error(e.message);\par
\}\par
console.log("Continue ...");    //    if    try/catch   \cf1 code will continue\cf0\par
\cf1 # Spread operator\par
\cf0   const x1 = [1,2,3]                \par
  const x2 = x1\par
  x2.push(4)\par
  console.log(x1);        [1,2,3,4]\par
  console.log(x2);         [1,2,3,4]\par
\par
  const x1 = [1,2,3]        \par
  const x2 = [...x1]\par
  x2.push(4)\par
  console.log(x1);           [1,2,3]\par
  console.log(x2);         \highlight4    [1,2,3,4]\par
\par
\par
\cf1\highlight0 # primitive types vs reference\par
\cf0\highlight4\par
\highlight0 let primitive = 5\par
let copyPrimitive1 = primitive\par
let copyPrimitive2 = primitive\par
primitive = 99\par
console.log(copyPrimitive1)                   // 5\par
console.log(copyPrimitive2)                   //  5\par
console.log(primitive)                              //  99\par
\par
\par
const referenceType = \{'a':1\}\par
const copyreference1 = referenceType\par
const copyreference2 = referenceType\par
referenceType['a'] = 2\par
console.log(copyreference1)               // \{'a':2\}\par
console.log(copyreference2)               // \{'a':2\}\par
console.log(referenceType)                 // \{'a':2\}\par
\highlight4\par
//New object copy\par
const x = \{\par
    name:"ann",\par
    age:33\par
\}\par
const x2 = Object.assign(\{\}, x)\par
// or const x2 = \{...x\}\par
// or FULL VARIANT const x2 = JSON.parse(JSON.stringify(x1))\par
//https://youtu.be/CxgOKJh4zWE?t=9661\par
x2.name = 'ken'\par
console.log(x.name)\par
console.log(x2.name)\par
\par
\highlight0 =========================\par
\highlight4\par
\highlight0 const arr = [\par
  [1, 2, 3],\par
  [4, 5, 6],\par
  [7, 8, 9],\par
];\par
\par
console.log(arr.map(e=> []))     //  [ [ ], [ ], [ ] ]\par

\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\cf1 #prototype\par

\pard\box\brdrdash\brdrw0 \sl276\slmult1 {\cf0{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=aQkgUUmUJy4 }}{\fldrslt{https://www.youtube.com/watch?v=aQkgUUmUJy4\ul0\cf0}}}}\cf6\f0\fs16\par
    \par
\cf7 const a1 = \{\par
    name:'ann',                         // var 1\par
    city:'tver'\par
\}\par
console.log(a1)                       // THE SAME\par
\par
    \par
const a2 = new Object( \{\par
    name:'ann',                          // var 2\par
    city:'tver'\par
\})\par
console.log(a2)\par
 \par
    \par
    \par
a1.color = 'green'\par
Object.prototype.color2 = 'red'               // now color2 FOR ALL\par
console.log(a1)\par
console.log(a1.color2)\par
\par
    \par
const a3 = \{\par
    age:4\par
\}    \par
\par
console.log(a3.age)\par
console.log(a3.color2)\par
\par
----------\par
const array = [1, 2, 3, 4]              \par
\par
Array.prototype.multiply = function(n)\{                 // now multiply FOR ALL\par
    console.log(this)\par
    return this.map(function(i)\{\par
        return i*n\par
    \})\par
\}    \par
\par
console.log(array.multiply(2))\par
\par
\par
\cf6 const lena = Object.create(a1)               // inherit from a1\par
\cf0\highlight2 function f1(name)\{\par
    const obj = \{\}\par
    obj.name = name\par
    obj.greet = function()\{\par
        console.log('Hello ' + this.name)\par
    \}\par
    return obj\par
\}\par
\par
const ff1 = f1('Frank')\par
ff1.greet()\par
\par
\cf1 //  THE SAME\par
\cf0\par
function F2(name)\{\par
    this.name = name\par
    this.greet = ()=> \{\par
        console.log('Hello ' + this.name)\par
    \}\par
\}\par
\par
const ff2 = new F2('Ann')\par
ff2.greet()\par
\par
// Create prototype\par
const a1 = \{\par
    name:'ann',                         \par
    city:'tver'\par
\}\par
\par
\highlight4 const a2 = Object.create(a1)                                 // var 1\par
console.log(a2.name)\par
console.log(a2.__proto__)\par
\par
Object.setPrototypeOf(a1,\{prototype1:'prototipe of a1'\})      // var 2\par
console.log(a1.prototype1)\par
console.log(a1.__proto__)\par
\par
const a4 = \{name:'jax', __proto__: \{city:'pskov'\}\}           // var 3\par
console.log(a4.city)\par
console.log(a4.__proto__)\par
\cf6\highlight0\par
\cf7 ------------------------------------------------------------------------------------------------ old variant\par
{\cf0{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=cTlxzxsFbDQ }}{\fldrslt{https://www.youtube.com/watch?v=cTlxzxsFbDQ\ul0\cf0}}}}\cf6\f0\fs16\par
\cf0 const Base1 = function(options)\{                       // create Base class\par
    this.name = options.name\par
    this.city = options.city\par
    this.greeting = function()\{\par
        console.log('Hi I am ' + this.name + ' from ' + this.city)\par
    \}\par
\}\par
  \par
\par
Base1.prototype.test1 = function()\{                  // add new arg\par
    console.log('!!!')\par
\}\par
const user1 = new Base1(\{'name':'Ann', 'city':'Paris'\})\par
const user2 = new Base1(\{'name':'Ola', 'city':'Tver'\})\par
\par
\par
\par
const Base2 = function(options)\{\par
    Base1.apply(this, arguments)                        // inherit from Base1\par
    this.hasTail = options.hasTail                      // add new argument\par
\}\par
\par
\par
Base2.prototype = Object.create(Base1.prototype)          // redefine class if changes by apply\par
Base2.prototype.constructor = Base2\par
\par
    \par
    \par
const guest1 = new Base2(\{name:'Fred', city:'Pskov', hasTail:true\})\par
\par
guest1.greeting()\par
console.log(guest1.hasTail)\f1\lang9\line\cf1\f0\lang1033 ---------------------------------------------------------------------- end old variant\par
\par
#class\par
\cf7 class Animal\{                                        // \cf1 define class            \cf7\par
    constructor(options)\{\par
        this.name = options.name                     // \cf1 define args\cf7\par
        this.age = options.age                        \par
    \}          \par
    voice()\{console.log('Base voice of ' + this.name)\}   // \cf1 add function\cf7\par
\}\par
    \par
\par
const example1 = new Animal(\{name:'ann', age:4\})        // \cf1 create instance\cf7\par
\par
example1.voice()\par
    \par
    \par
    \par
class Cat extends Animal\{                              // i\cf1 nherit from animal\cf7\par
    constructor(options)\{\par
        super(options)\par
        this.hasTail = options.hasTail                            // \cf1 add new args\cf7\par
    \}\par
\}\par
---------------------------------------------------------------------------end class\par
\cf1\b #BIND\par
\cf7\b0 const user = \{\par
    name:'ann',\par
    city:'tver'\par
\}\par
\par
\par
function f(tel)\{\par
    console.log(this.name + ' from ' + this.city + tel)\par
\}\par
\par
f.bind(user, 123)()               \par
f.call(user,123)   \par
f.apply(user, [123])\par
\par
=============================#\cf1 Promise\cf7 =#async\par
\highlight4 let flag = true\par
const s1 = () => \par
  new Promise((resolve, reject) => \{\par
    setTimeout(()=>\{\par
      console.log(1)\par
      flag = false\par
      resolve()\par
    \}, 2000)\par
\par
  \})\par
\par
const s2 = () => \{\par
  if(flag)\{\par
    console.log(2)\par
  \}\par
  return\par
\}\par
\par
const s3 = async() => \{\par
  await s1()\par
  s2()\par
\}\par
\highlight0\par
onst stage1 = ms => \{\par
    return new Promise((rej, res)=>\{\par
        if(ms>2000)\{\par
            setTimeout(()=>\{\par
                res('stage1 is over')\par
            \}, ms)\par
        \}else\{\par
            rej('eror stage1')\par
        \}\par
    \})\par
\}\par
\par
const stage2 = ms =>\{\par
    return new Promise((rej,res)=>\{\par
        if(ms>2000)\{\par
            console.log('process started');\par
            setTimeout(()=>\{\par
                res('stage2 is over')\par
            \},ms)\par
        \}else\{\par
            rej('error stage2')\par
        \}\par
    \})\par
\}\par
\par
async function a1()\{\par
    await stage1(200)\par
    .then(r=>console.log(r))\par
    .catch(r=>console.log(r))\par
\par
    await stage2(2001)\par
    .then(r=>console.log(r))\par
    .catch(r=>console.log(r))\par
\}\par
\par
a1()\par
==============================\par
\par

\pard\box\brdrdash\brdrw0 \sl240\slmult1\cf6\f1\lang9\line\f0\lang1033 -----------\f1\lang9\line\cf0\b const x = [1,2,3,4]\par
const x1 = x.reduce((i,v)=>i*v)\f0\lang1033                                                                       /*reduce*/\f1\lang9\par

\pard\sa200\sl276\slmult1 console.log(x1)\par
const x = document.querySelectorAll('img')\par
\cf1\b0\f0\lang1033 #LAZY lOADING\cf0\b\f1\lang9\par

\pard\sl276\slmult1\b0 const x = document.querySelectorAll('img')\par
const observer = new IntersectionObserver(entries => \{\par
    entries.forEach(entry => \{\par
        if(entry.isIntersecting && entry.target.className === 'service-img')\{\par
            const imgUrl = entry.target.getAttribute("data-src")\par
            if(imgUrl)\{\par
                entry.target.src = imgUrl\par
                observer.unobserve(entry.target)\par
            \} \par
        \}\par
    \});\par
\},\{ threshold:1, rootMargin:'0px' \})\par
\par
x.forEach(e => \{\par
    observer.observe(e)\par
\})\par
\par
\highlight3\f0\lang1033 # CHART.js\highlight0\par
<div style="max-width: 1200px; border: 2px solid black; display:flex;">\par
\par
    <canvas id="myChart" width="400" height="200"></canvas>\par
</div>\par
<script>\par
const ctx = document.getElementById('myChart').getContext('2d');\par
\par
const myChart = new Chart(ctx, \{\par
    type: 'line',\par
    data: \{\par
        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\par
        datasets: [\{\par
            label: '# of Votes',\par
            data: [12, 19, 3, 5, 2, 3],\par
            fill: true,\par
            // color of  point\par
            pointBackgroundColor: '#fff',\par
            // size of  point\par
            radius: 5,\par
            //hover radius\par
            hitRadius: 30,\par
            // increase point\par
            hoverRadius: 30,\par
            // curve\par
            tension: 0.1,\par
\par
            animations: \{\par
      tension: \{\par
        duration: 1000,\par
        easing: 'linear',\par
        from: 1,\par
        to: 0,\par
        // loop: true\par
      \},\par
      radius: \{\par
        delay: 2000,\par
        duration: 2000,\par
        easing: 'linear',\par
        from: 0,\par
        to: 10,\par
        // loop: true\par
      \},\par
    \},\par
            \par
            backgroundColor: [\par
                'rgba(255, 99, 132, 0.2)',\par
                'rgba(54, 162, 235, 0.2)',\par
                'rgba(255, 206, 86, 0.2)',\par
                'rgba(75, 192, 192, 0.2)',\par
                'rgba(153, 102, 255, 0.2)',\par
                'rgba(255, 159, 64, 0.2)'\par
                \par
            ],\par
            borderColor: [\par
                'rgba(255, 99, 132, 1)',\par
                'rgba(54, 162, 235, 1)',\par
                'rgba(255, 206, 86, 1)',\par
                'rgba(75, 192, 192, 1)',\par
                'rgba(153, 102, 255, 1)',\par
                'rgba(255, 159, 64, 1)'\par
            ],\par
            borderWidth: 1\par
        \}]\par
    \},\par
    options: \{\par
        // responsive:true,\par
        scales: \{\par
            y: \{\par
                ticks:\{\par
                    callback: function(value)\{\par
                        return '$ ' + value\par
                    \}\par
                \},\par
                beginAtZero: true\par
            \}\par
        \}\par
    \}\par
\});\par
\par
</script>\lang9\par
}
 