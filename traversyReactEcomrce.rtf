{\rtf1\ansi\ansicpg1251\deff0\nouicompat\deflang1049{\fonttbl{\f0\fnil\fcharset0 Courier New;}{\f1\fnil\fcharset0 Calibri;}{\f2\fnil\fcharset204 Calibri;}}
{\colortbl ;\red255\green0\blue0;\red0\green255\blue255;\red255\green0\blue255;\red0\green0\blue255;\red255\green255\blue0;\red0\green255\blue0;\red192\green80\blue77;\red155\green0\blue211;\red0\green176\blue80;}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\f0\fs22\lang1033 @echo off\par
cd salon\\frontend\par
npm start\par

\pard\sl276\slmult1\highlight1\b\f1\fs16\lang9  \par
 rfc + tab\highlight2\par
Within the directory of the package.json \b0 file, just run \b npm install\b0 . It will read package.json and install all dependencies. If you want to limit it to only non-dev dependencies, use \b npm install --only=production.\par
\par
npm i redux-devtools-extension \highlight1 --save-dev  \highlight2                            only development, will removed when production  \b0\par
\par
Prettier, ES7 React/Redux, autoCloseTag, Bracket Pair colonizer, aurorenameTag,     Python tabnine\par
\par
\highlight3 npx create-react-app frontend\par
\b npx create-react-app . --template redux\par
\par
npm i @types/react-redux redux react-redux redux-thunk                                       old redux\par
\par
npx create-react-app my-app --template typescript\par
\par
VS Code ES7+ React/Redux/React-Native/JS snippets                                                 VS CODE\par
\highlight0\b0\par
npm i \b\fs18 bcrypt \b0 cors \fs16 mongoose mongodb express-async-handler express axios dotenv jsonwebtoken nodemailer uuid \b --save-dev nodemon\par
\par
node\par
require('crypto').randomBytes(64).toString('hex')\b0\par
\par
VS CODE   File > Preferences > Keyboard Shortcuts  {{\field{\*\fldinst{HYPERLINK https://newbedev.com/what-is-the-shortcut-in-visual-studio-code-for-console-log }}{\fldrslt{https://newbedev.com/what-is-the-shortcut-in-visual-studio-code-for-console-log\ul0\cf0}}}}\f1\fs16\par
\highlight2 [\par
    \{\par
        "key": "ctrl+p",\par
        "command": "editor.action.insertSnippet",\par
        "when": "editorTextFocus",\par
        "args": \{\par
          "snippet": "console.log($\{TM_SELECTED_TEXT\}$1)"\par
        \}\par
      \}\par
]\par
\highlight0\par
\highlight5 const x = () => \{\par
      const a = 'aaa'\par
      const b = 'bbb'\par
      return [a,b]\par
    \}\par
    const [a, b] = x()\par
    console.log(a)\par
\par
{\highlight6{\field{\*\fldinst{HYPERLINK https://github.com/gitdagray/node_js_resources }}{\fldrslt{https://github.com/gitdagray/node_js_resources\ul0\cf0}}}}\highlight6\f1\fs16                                                                   #NODE\par
\highlight0\par
\highlight2     console.log(Math.random().toString(36).substr(2, 5))                                                        #random\par
Math.floor(1000 + Math.random() * 9000)                                                                #4 digit\par
\par
         function myFunction() \{                                                                                                   #clipboard#copy\par
  var copyText = document.getElementById("rand2")\par
  navigator.clipboard.writeText(copyText.innerHTML);\par
\}\par
\highlight6\b\par
[...Array(5).keys()].map(e=> \{                                                           #range\par
    console.log(e) \par
\})\par
\par
\highlight2 function chbg(color) \{\par
    document.getElementById('b').style.backgroundColor = color;\par
\}   \par
<div id="a" \highlight1\fs24 onmouseover\highlight2\fs16 ="chbg('red')" onmouseout="chbg('white')">This is element a</div>\par
<div id="b">This is element b</div>\par
\highlight6\par
\fs22 req.headers.host                              get #url node js\par
const \{password, username, ...info\} = user._doc                        #except node\par
        console.log(info)\par
\par
\highlight5\fs20 React.useEffect(() => \{                                             #leaving page\par
    return () => \{\par
      alert('llllll')\par
      clearTimeout(t)\par
    \};\par
  \}, []);\par
  \par
  return (\par
    <div className="slider">\par
\highlight6\fs22\par
\highlight2\fs14 let t\par
          const timer = ()=>\{\par
           window.clearTimeout(t)\par
          t = window.setTimeout(\par
          () => \{\par
          setErr('')\par
           \}, 2000)\par
                 \}\par
           timer()\highlight6\fs22\par
\highlight5\fs16 const countDown = () => \{\f2\lang1049                           \f1\lang1033 #countdown\lang9\par
        setCount(count-1)\par
       \} \par
    count > 1 && setTimeout(countDown, 1000)\par
\highlight3\b0\par
const [count, setCount] = useState(10);                                    #count timer countdown\par
const timer = () => \{\par
    console.log(count)\par
    setCount(count-1)\par
\}\par
\par
useEffect(\par
    () => \{\par
        if (count <= 0) \{\par
            return;\par
        \}\par
        const id = setInterval(timer, 1000);\par
        return () => clearInterval(id);\par
    \},\par
    [count]\par
);\par
\par
\highlight2 const f = () => \{\par
        alert(0)\par
    \}\par
    const keyF = (e) => \{\par
        if(e.key === 'ArrowRight')\{                                             # simple arrow key\par
            console.log('right')\par
        \}\par
        if(e.key === 'ArrowLeft')\{\par
            f()\par
        \}\par
    \}\par
    document.addEventListener('keydown', keyF)\par
\highlight3\par
\highlight5\fs20 #NODE js\par
{\fs16{\field{\*\fldinst{HYPERLINK https://youtu.be/243pQXC5Ebs?t=2554 }}{\fldrslt{https://youtu.be/243pQXC5Ebs?t=2554\ul0\cf0}}}}\f1\fs16\par
p\highlight0 ath.join('__dirname, '..')\par
path.parse(someurl)\par
f..mkdirSync(__dirname, 'dir1','dir2', \{recursive: true\})        // many folders\par
\highlight2\fs22 #USECONTEXT\par
\highlight0\fs16 import \{ createContext \} from "react";                      \highlight5 context.js\highlight0\par
export const Context = createContext(null)\par
\par
<Context.Provider value=\{[err, setErr]\}>\par
    <BrowserRouter>\par
        \par
        \{err && <h1>\{err\}</h1>\}                                                    \highlight5 app.js\highlight0\par
      <Switch>\par
        <Route path='/admin-panel/add-service' component=\{AddServicePage\} />\par
      </Switch>\par
    </BrowserRouter>\par
      </Context.Provider>\par
\par
import \{Context\} from '../Context'                                                  \highlight5 AddServicePage\highlight0\par
const AddServicePage = () => \{\par
    const [err, setErr] = useContext(Context)\par
\fs10\par
\highlight5\fs16 frontend/src/screens/ProductScreen.js\par
\highlight0 import React, \{useEffect, useState\} from 'react'\par
import Rating from '../components/Rating'\par
import \{useDispatch, useSelector\} from 'react-redux'\par
import \{listProductsDetails\} from '../actions/productActions'\par
import LoadingBox from '../components/LoadingBox'\par
import MessageBox from '../components/MessageBox'\par
const ProductScreen = (props) => \{\par
    const [qty, setQty] = useState(1)\par
    const dispatch = useDispatch()\par
    const productDetails = useSelector((state) =>state.productDetails)\par
    const \{loading, product, error\} = productDetails\par
    useEffect(()=> \{\par
        dispatch(listProductsDetails(props.match.params.id))\par
\par
    \}, [dispatch, props.match.params.id])    \par
    const addToCartHandler = () => \{\par
       props.history.push(`/cart/$\{props.match.params.id\}?qty=$\{qty\}`)\par
    \}\par
\par
    return (\par
<>\par
\{loading? (<LoadingBox></LoadingBox>):\par
            error?(<MessageBox variant='danger' >\{error\} </MessageBox>):\par
            (\par
                <div className='product-card'>\par
            <div className='product-image'>\par
                <img className='img1' src=\{product.image\} alt='no photo'/>\par
            </div>\par
            <div className='product-info'>\par
                <h3>\{product.name\}</h3>\par
            <Rating value=\{product.rating\} reviews=\{product.numReviews\}/>\par
            <p>\{product.description\}</p>\par
            \{product.countInStock>0?<h4>In Stock</h4>:<h4>Out of Stock</h4>\}\par
            </div>\par
            <div className='product-price'>\par
                <h3> Price:  $\{product.price\}</h3>\par
               <select value=\{qty\} onChange=\{e=>setQty(e.target.value)\}>\par
                \{[...Array(product.countInStock).keys()].map(x=>(\par
                        <option key=\{x+1\}  value=\{x+1\} >\{x+1\} </option>\par
                ))\}\par
                    </select>    \par
                    \{product.countInStock > 0 && (\par
                                        <button onClick=\{addToCartHandler\} className='btn' >Add To Cart</button>\par
                    )\}\par
            </div>\par
        </div>\par
            )\par
            \}\par
</>             \par
    )\par
\}\par
\par
export default ProductScreen\highlight5\par
\highlight0\par
\highlight6\fs36 #Router\par
\highlight5\fs16 App.js\par
\highlight0 import Header from './components/Header'\par
import Footer from './components/Footer'\par
import \{ Container \} from 'react-bootstrap'\par
import HomeScreen from './screens/HomeScreen'\par
import ProductScreen from './screens/ProductScreen'\par
\highlight3 import \{ BrowserRouter as Router, Route \} from 'react-router-dom'\par
\highlight0\par
const App = () => \{\par
  return (\par
\b     <Router>\par
\b0 <Header/>\par
<main className='py-3' > \par
  <Container>\highlight5\par
    <Route path='/' component=\{HomeScreen\} exact />\par
    <Route path='/product/:id' component=\{ProductScreen\} />\highlight0\par
  </Container>\par
</main>\par
<Footer/>\par
\b     </Router>\par
\b0   );\par
\}\par
export default App;\par
\par
\par
\highlight5 Product.js\par
\highlight0 import React from 'react'\par
import \{ Card \} from 'react-bootstrap'\par
import Rating from './Rating'\par
\highlight3 import \{ Link \} from 'react-router-dom'\par
\highlight0\par
const Product = (\{ product \}) => \{\par
    return (\par
        <Card className='my-3 p-3 rounded' >\highlight6\par
        <Link to=\highlight0\{`/product/$\{product._id\}`\} >                                      // Link to=     instead    a href\par
            <Card.Img src=\{product.image\} \highlight1 style=\{\{ height: '200px'\}\} \highlight0 />\par
 \highlight6         </Link>\par
\highlight0             <Card.Body \highlight1 style=\{\{height:'150px'\}\}\highlight0  >\par
            <a href=\{`/product/$\{product._id\}`\} >\par
                <Card.Title as='div' >\par
                   <strong> \{product.name\} </strong>\par
                </Card.Title>\par
        </a>\par
            </Card.Body>\par
\par
            <Card.Text as="div" >\par
              <Rating \par
              value=\{product.rating\}\par
              text=\{`$\{product.numReviews\} reviews`\}\par
              />\par
            </Card.Text>\par
            <Card.Text as='h3'> $\{product.price\} </Card.Text>            \par
        </Card>\par
    )\par
\}\par
export default Product\par
\par
const ProductScreen = (\{\highlight3 match\highlight0\}) => \{\par
    const product = products.find(p => p._id === match.params.\highlight3 id\highlight0 )      // \highlight5     <Route path='/product/:id' component=\{ProductScreen\} />                   id  from here    \highlight0\par
\par
\par
    return (\par
        <div>\par
            \{product.name\}\par
        </div>\par
    )\par
\}\par
\par
export default ProductScreen\par
\par
\highlight5\fs36 API\par
\fs16 root/                                                 npm init\par
\highlight0\par
const express = require('express')\par
const app = express()\par
const products = require('./data/products')\par
\par
app.get('/', (req, res)=>\{\par
    res.send('Api is running..')\par
\} )\par
app.get('/api/products', (req, res) =>\{\par
    res.json(products,         \cf1\b count: products.length,\cf0\b0 )                                      or res.status(200).json(products)\par
\} )\par
app.get('/api/products/:idd', (req, res) => \{\par
    const product = products.find(p => p._id === req.params.idd)\par
    res.json(product)\par
\})\highlight5\fs36\par
\highlight0\fs16 app.listen(5000, console.log('Server running on port 5000'))\par
\par
// PUT \cf1 Update \cf0 single product    =>  /admin/product/:id                    // router.route('/admin/product/:id').put(updateProduct)\par
exports.updateProduct = async(req, res, next) => \{\par
    let product = await Product.findById(req.params.id)\par
    if(!product)\{\par
        return res.status(404).json(\{\par
            success:false, message:"Product not Found"\par
        \})\par
    \}\par
    product = await Product.findByIdAndUpdate(req.params.id, req.body, \{\par
        new: true,\par
        runValidators:true,\par
        useFindAndModify:false\par
    \})\par
    res.status(200).json(\{success:true, product\})\par
\}\par
// \cf1 Delete \cf0 product => /api/v1/admin/product/:id      // \fs14 router.route('/admin/product/:id').put(updateProduct).\cf1 delete\cf0 (deleteProduct)\fs16\par
exports.deleteProduct = async (req, res, next) => \{\par
    const product = await Product.findById(req.params.id)\par
    if (!product)\{\par
        res.status(404).json(\{success:false, message:'Not found'\})\par
    \}\par
    await product.remove()\par
    res.status(200).json(\{success:true, message:'Product is deleted'\})\par
\}\par
\par
\highlight5\b\fs24 package.json / frontend\par
\highlight2\b0\fs16   "name": "frontend",\par
\b\fs24   "proxy":"{{\field{\*\fldinst{HYPERLINK http://127.0.0.1:5000 }}{\fldrslt{http://127.0.0.1:5000\ul0\cf0}}}}\f1\fs24 ", \b0\fs16              \i - to conect frontend running on 3000 and backend running on 5000       \highlight1 5000 + api/products/1\par
\highlight0\par
or \par
npm i cors\par
const cors = require('cors')\par
app.use(cors()\par
\i0\par
\highlight5 =================================================================================\par
\highlight6\fs36 DOTENV\par
\highlight0\fs16 npm i dotenv\par
\highlight5 backend/server.js\par
\highlight0 const dotenv = require('dotenv')\par
dotenv.config()    \par
const PORT = process.env.PORT|| 5000\par
\highlight5 root/.env                                   \par
\highlight0 NODE_ENV = development\par
PORT = 5000\par
\highlight5 ================================================================================\highlight0\par
\par
\par
\par
\par
\fs32 create \fs40 backend \fs32 folder beside frontend ----------------------------\par
\fs16 in root where frontend and backend located \highlight5 npm init                 entry point  SERVER.js\par
\par
\highlight2 PROXY:\par
  "name": "frontend",\par
\b\fs24   "proxy":"{{\field{\*\fldinst{HYPERLINK http://127.0.0.1:5000 }}{\fldrslt{http://127.0.0.1:5000\ul0\cf0}}}}\f1\fs24 ",                                           package.json / frontend\par
\b0\fs16   "version": "0.1.0",\par
\par
\b  npm i -D nodemon concurrently\par
\b0   "scripts": \{\par
    "start": "node backend/server",                                                         \par
    "server":"nodemon backend/server",\par
    "client": "npm start --prefix frontend",\par
    "dev": "concurrently \\"npm run server\\" \\"npm run client\\""                          \i - get backend and frontend running concurrently\i0\par
  \},\par
\highlight5\par
\highlight2\fs24 npm run dev\par
\highlight5\fs16\par
\highlight0 ====================================================\par
\highlight4   "main": "server.js",\par
  "type":"module",                                                   \i\fs20 to change  module export\par
\highlight5\i0\fs16\par
frontend/src/screens/HomeScreen.js\par
\highlight0 import React, \{useState, useEffect\} from 'react'\par
import \{Row, Col\} from 'react-bootstrap'\par
import Product from '../components/Product'\par
import \highlight6\b\fs44 axios \highlight0\b0\fs16 from 'axios'\par
\cf1\b import \{Link, useHistory\} from 'react-router-dom'\par
\highlight2 const history= useHistory()\par
\cf0\b0 const PostData = () => \{                                                                                                                       \b\fs20 //FETCH VARIANT\b0\fs16\par
        fetch('{{\field{\*\fldinst{HYPERLINK http://localhost:5000/signup }}{\fldrslt{http://localhost:5000/signup\ul0\cf0}}}}\f1\fs16 ', \{method:"post", headers:\{"Content-Type":"application/json"\},\par
        body:JSON.stringify(\{\par
            username, password, email\par
        \})\par
    \}).then(res=>res.json()).then(data=>\{if(data.error)\{M.toast(\{html:data.error\})\}else\{M.toast(\{html:data.message\})\par
\cf1\b history.push('/login')\par
\cf0\b0\}\})\par
    \}\par
\highlight0\par
const HomeScreen = () => \{\par
    const [products, setProducts] = useState([])\par
    useEffect(()=>\{\par
        const fetch = async()=>\{\par
            const \{data\} = await axios.get('{{\field{\*\fldinst{HYPERLINK http://localhost:5000/api/products/ }}{\fldrslt{http://localhost:5000/api/products/\ul0\cf0}}}}\f1\fs16 ')\par
            setProducts(data)\par
        \}\par
        fetch()\par
    \}, [])\par
    return (\par
        <>\par
        <h1>Latest Products</h1>\par
<Row >\par
        \{products.map(p =>\par
                        <Col key=\{p._id\} sm=\{12\} md=\{6\} lg=\{4\} xl=\{3\}  >\par
                <Product product=\{p\} />\par
            </Col>           \par
            )\}\par
        </Row>\par
        </>\par
    )\}\par
export default HomeScreen\par
\highlight5\par
\highlight6\fs44 #MONGO..#mongoose\par
{\highlight2\fs16{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=DZBGEVgL2eEbackend/config/db.js }}{\fldrslt{https://www.youtube.com/watch?v=DZBGEVgL2eE\highlight5 backend/config/db.js\ul0\cf0}}}}\highlight5\f1\fs16\par
\par
User.find(\{name:'Jax'\})\par
User.\highlight3 where\highlight5 ('age').\highlight3 gt\highlight5 (12).\highlight3 ls\highlight5 (21).\highlight3 where\highlight5 ('name').\highlight3 equals\highlight5 ('Jax').\highlight3 limit\highlight5 (2).\highlight3 select\highlight5 ('age').\highlight3 populate\highlight5 ('BestFriend')\par
\par
\highlight2 cons updated = await Post.findByIdAndUpdate(id, post, \{new:true\})\par
res.send(updated\}\par
\par
\highlight5\par
\highlight2       const stories = await Story.find(\{ age: 27 \})\par
\par
\highlight5 const StorySchema = new mongoose.Schema(\{\par
type: String,\par
minLength: 10,\par
maxLength: 20,\par
    trim: true,\par
    default: 'public',\par
    enum: ['public', 'private'],\par
    type: mongoose.Schema.Types.ObjectId,\par
    ref: 'User',\par
    default: Date.now(),\par
lowercase: true,\par
  \},\par
createdAt: \{\par
    type: Date,\par
    default: () => Date.now(),\par
immutable: true\par
  \},\par
age: \{\par
    type: Number,\par
min: 18,\par
max: 100,\par
validate: \{                                                                                                                       !!! only if create method\par
validator: v => v % 2 === 0,\par
message: props => `$\{props.value\} is not an even number`\par
\}\par
  \},\par
\})\par
\par
StorySchema .\b methods\b0 .sayHello = function()\{\par
\tab console.log(`Hello. My name is $\{\b this.name\b0\}`)                                                    try\{ user.sayHello()           \par
\}\par
\par
StorySchema .\b statics\b0 .findByName = function(name)\{                                                                   await Story.findByName('Kyle')  \par
\tab return this.where(\{name: new Regex(name:'i')\})\par
{{\field{\*\fldinst{HYPERLINK https://youtu.be/DZBGEVgL2eE?t=1594 }}{\fldrslt{https://youtu.be/DZBGEVgL2eE?t=1594\ul0\cf0}}}}\f1\fs16\par
\}\par
                                    or                                  \par
StorySchema .\b query\b0 .ByName = function(name)\{                                                                   await Story.find().ByName('Kyle')  \par
\tab return this.where(\{name: new Regex(name:'i')\})\par
\}\par
\highlight3\par
StorySchema .\b virtual\b0 ('namedEmail').get. function()\{                                        await Story.findOne(\{name:'Jax',email:'test@tt.ru'\}) \par
\tab return `$\{this.name  <$\{this.email\}>  \}`                                      DO NOT WRITE IN TO DATABASE\par
\tab\tab\tab\tab\tab\tab\tab\b user.namedEmail\b0\tab\par
\highlight5\}\par
\par
StorySchema .\b pre(\b0 'save', function(next)\{                                   do before 'save'\par
\tab this.updateAt = Date.now()\par
\tab next()\par
\}\b )\par
\par
\b0 StorySchema .\b post(\b0 'remove', function(doc,next)\{                                   do before 'save'\par
\tab doc.sayHello()\par
\tab next()\par
\}\b )\b0\par
\par
\}\par
\par
\par
module.exports = mongoose.model('Story', StorySchema)\par
\par
\highlight0 import mongoose from 'mongoose\par
const connectDB = async () => \{\par
    try \{\par
        const conn = await mongoose.connect(process.env.MONGO_URI, \{\par
            useUnifiedTopology: true,\par
            useNewUrlParser: true,\par
            useCreateIndex: true,\par
        \})\par
        console.log(`MongoDB Connected: $\{conn.connection.host\}`);\par
    \} catch (error) \{\par
        console.error(`Error: $\{error.message\}`)\par
        process.exit(1)\par
    \}\par
\}\par
export default connectDB\par
\highlight2 mongoose.connect(process.env.MONGO_URI,                                                 //   var 2\par
    \{ useUnifiedTopology: true,\par
        useNewUrlParser: true \par
    \} )\par
mongoose.connection.on('connected', ()=>\{\par
    console.log('Connected to mongo!!')\par
\}) \par
mongoose.connection.on('error', (err)=>\{\par
    console.log('err connecting', err)\par
\})\par
\par
\highlight6 const express = require('express')                                                                   var 3 start\par
const cors = require('cors')\par
 const mongoose = require('mongoose')\par
const router = require('./router')\par
const app = express()\par
require('dotenv').config()\par
\par
app.use(express.json())\par
app.use(cors())\par
app.use('/api', router)\par
\par
const PORT = process.env.PORT || 5000\par
const start = async () => \{\par
    try\{\par
        await mongoose.connect(process.env.DB_URL, \{\par
            useNewUrlParser: true,\par
            useUnifiedTopology: true\par
        \})\par
        console.log('mongo  connected!')\par
        app.listen(PORT, console.log(`Server started on port: $\{PORT\}`))\par
    \}catch(e)\{\par
        console.log(e)\par
    \}\par
\}\par
\par
start()\par
\highlight2\par
\highlight3 mongoose.connect(process.env.URI, \{useNewUrlParser: true, useUnifiedTopology: true, useCreateIndex:true\})\par
.then(console.log('connected to MongoDB'))                                                                            //var 3\par
.catch((err)=> console.log(err))\par
\highlight5 backend/server.js\par
\highlight0 import express from 'express'\par
import products from './data/products.js'\par
import dotenv from 'dotenv'\par
\highlight3 import connectDB from './config/db.js'\par
\highlight0\par
dotenv.config()\par
\par
\highlight3 connectDB()\par
\highlight0\b\par
const app = express()\par
app.use(express.json())\par
app.use(express.urlencoded(\{extended:true\}))\par
\b0 app.get('/', (req, res) => \{\par
    res.send('API is running')\par
\})\par
app.get('/api/products', (req, res) => \{\par
    res.json(products)\par
\})\par
app.get('/api/products/:id', (req, res) => \{\par
    const product = products.find((p) => p._id === req.params.id)\par
    res.json(product)\par
\})\par
const PORT = process.env.PORT || 5000\par
app.listen(PORT, console.log(`Server running in $\{process.env.NODE_ENV\} mode on port $\{PORT\}`))\par
\highlight5 USERMODEL\par
const validator = require('validator')\par
\highlight2 const userSchema = new mongoose.Schema(\{\par
    name:\{\par
        type:String,\par
        required:[true, "Please enter your email.."],\par
        maxLength:[30, 'Your name cannot exceed 30 characters']\par
    \},\par
    email:\{\par
        type:String,\par
        required:[true, "Please enter your email.."],\par
        unique:true,\par
lowercase: true,\par
        validate:[validator.isEmail, 'Please, enter valid email address']\par
    \},\par
    password:\{\par
        type:String,\par
        required:[true, 'Plese enter your password'],\par
        minLength:[6, 'Your password must be longer than 6 characters'],\par
        select:false\par
    \},avatar: \{\par
        public_id:\{\par
            type:String,\par
            required:true\par
        \},\par
        url: \{\par
            type:String,\par
            required:true\par
        \}\par
    \},role:\{\par
        type:String,\par
        default:'user'\par
    \},\par
    createdAt:\{\par
        type:Date,\par
        default: Date.now\par
    \},\par
    resetPasswordToken:String,\par
    resetPasswordExpire: Date\par
\}, \{timestamps:true\})\par
\par
userSchema.pre('save', async function(next)\{\par
    if(!this.isModified('password'))\{\par
        next()\par
    \}\par
    this.password = await bcrypt.hash(this.password, 10)\par
\})\par
\par
userSchema.methods.getJwtToken = function()\{\par
    return jwt.sign(\{id:this._id\}, 'secret', \{expiresIn:'1h'\})\par
\}\par
\par
userSchema.methods.getResetPasswordToken = function()\{\par
    const resetToken = crypto.randomBytes(20).toString('hex')\par
    this.resetPasswordToken = crypto.createHash('sha256').update(resetToken).digest('hex')\par
    this.resetPasswordToken = Date.now() + 30 * 60 * 1000                                 //30min\par
    return resetToken\par
\}\par
\par
const User = mongoose.model('User', userSchema)\par
module.exports = User\par
\highlight5 backend/models/userModel.js\par
\highlight0 import mongoose from "mongoose";\par
\par
const userSchema = mongoose.Schema(\{\par
    name: \{\par
        type: String,\par
        required: true\par
    \},\par
    email: \{\par
        type: String,\par
        required: true,\par
        unique: true,\par
    \},\par
    password: \{\par
        type: String,\par
        required: true\par
    \},\par
    isAdmin: \{\par
        type: Boolean,\par
        required: true,\par
        default: false\par
    \}\par
\}, \{timestamps: true \} )\par
\par
const User = mongoose.model('User', userSchema)\par
\par
export default User\par
\highlight5 backend/models/productModel.js\par
\highlight0 import mongoose from "mongoose";\par
\par
const reviewSchema = mongoose.Schema(\{\par
    name: \{ type: String, required: true\},\par
    rating: \{ type: Number, required: true\},\par
    comment: \{type: String, required: true\}\par
\}, \{timestamps: true \})\par
\par
const productSchema = mongoose.Schema(\{\par
    user: \{\par
        type: mongoose.Schema.Types.ObjectId,\par
        required: true,\par
        ref: 'User'\par
    \},\par
    name: \{\par
        type: String,\par
        required: true\par
    \},\par
    image: \{\par
        type: String,\par
        required: true,\par
    \},\par
   ax brand: \{\par
        type: String,\par
        required: true\par
    \},\par
    category: \{\par
        type: String,\par
        required: true,\par
    \},\par
    description: \{\par
        type: String,\par
        required: true,\par
    \},\par
    reviews: [reviewSchema],\par
    rating: \{\par
        type: Number,\par
        required: true,\par
        default: 0\par
    \},\par
    numReviews: \{\par
        type: Number,\par
        required: true,\par
        default: 0\par
    \},\par
    price: \{\par
        type: Number,\par
        required: true,\par
        default: 0\par
    \},\par
    countInStock: \{\par
        type: Number,\par
        required: true,\par
        default: 0\par
    \}\par
\par
\}, \{timestamps: true \} )\par
const Product = mongoose.model('\highlight3 Product\highlight0 ', productSchema)         // \highlight3 Product \highlight0 - name of collection\par
export default Product\par
\highlight5 backend/models/orderModel.js\par
\highlight0 import mongoose from "mongoose";\par
\par
const orderSchema = mongoose.Schema(\{\par
    user: \{\par
        type: mongoose.Schema.Types.ObjectId,\par
        required: true,                                                                                    \par
        ref: 'User'\par
    \},\par
    orderItems: [\{\par
        name: \{ type: String, required: true \},\par
        qty: \{ type: Number, required: true\},\par
        image: \{type: String, required: true\},\par
        price: \{ type: Number, required: true\},\par
        product: \{\par
            type: mongoose.Schema.Types.ObjectId,\par
            required: true,\par
            ref: 'Product'\par
        \}\par
        \}], \par
    shippingAddress: \{\par
        address: \{ type: String, required: true\},\par
        city: \{ type: String, required: true\},\par
        postalCode: \{ type: String, required: true\},\par
        country: \{ type: String, required: true\},\par
    \},\par
    paymentMethod: \{\par
        type: String,\par
        required: true\par
    \},\par
    paymentResult: \{\par
        id: \{ type: String\},\par
        status: \{ type: String\},\par
        update_time: \{ type: String \},\par
        email_address: \{ type: String\}\par
    \},\par
    taxPrice: \{\par
        type: Number,\par
        required: true,\par
        default: 0.0\par
    \},\par
    shippingPrice: \{\par
        type: Number,\par
        required: true,\par
        default: 0.0\par
    \},\par
    totalPrice: \{\par
        type: Number,\par
        required: true,\par
        default: 0.0\par
    \},\par
    isPaid: \{\par
        type: Boolean,\par
        required: true,\par
        default: false\par
    \},\par
    paidAt: \{\par
        type: Date\par
    \},\par
    isDelivered: \{\par
        type: Boolean,\par
        required: true,\par
        default: false\par
    \},\par
    deliveredAt: \{\par
        type: Date\par
    \}\par
\}, \{timestamps: true \} )                                        //\highlight3  time and date inserted in the end of  data\highlight0\par
\par
const Order = mongoose.model('Order', orderSchema)\par
export default Order \par
\highlight2 exports.newProduct = async(req, res, next) => \{                           // Who is created\par
    try\{\par
\b\fs20         req.body.user = req.user._id\par
\b0\fs16         const product = await Product.create(req.body)\par
    res.status(201).json(\{\par
        success:true,\par
        product\par
    \})\par
    \}catch(err)\{\par
        res.status(400).json(\{err, success:false, message:'error..'\})\par
    \}\par
\}\par
\par
\highlight0\par
\b     \highlight2 user: \{\par
        type: mongoose.Schema.Types.ObjectId,                        // in models\par
        required: true,                                                                                    \par
        ref: 'User'\par
    \},\par
\b0\par
\highlight0\par
\highlight5 backend/data/users.js\par
\highlight0 import bcrypt from 'bcryptjs'\par
\par
const users = [\par
    \{\par
        name: 'Admin User',\par
        email: 'admin@abc.vom',\par
        password: bcrypt.hashSync('123456', 10),\par
        isAdmin: true,\par
    \},\par
    \{\par
        name: 'John User',\par
        email: 'jonen@abc.vom', \par
        password: bcrypt.hashSync('123456', 10),\par
    \},\par
    \{\par
        name: 'Jane User',\par
        email: 'janein@abc.vom',\par
        password: bcrypt.hashSync('123456', 10),\par
    \}\par
]\par
export default users\par
\highlight5\par
backend/seeder.js\par
    "data:import": "node backend/seeder",                                                      npm run data:import\par
    "data:destroy": "node backend/seeder -d"\par
\highlight0\par
import mongoose from 'mongoose'\par
import dotenv from 'dotenv'\par
import users from './data/users.js'\par
import products from './data/products.js'\par
import User from './models/userModel.js'\par
import Product from './models/productModel.js'\par
import Order from './models/orderModel.js'\par
import connectDB from './config/db.js'\par
\par
dotenv.config()\par
connectDB()\par
\par
\par
const importData = async () => \{                      \highlight3 // node backend/seeder\highlight0\par
    try\{\par
        await Order.deleteMany()\par
        await Product.deleteMany()\par
        await User.deleteMany()\par
\par
        const createdUsers = await User.insertMany(users)\par
        const adminUser = createdUsers[0]._id\par
        const sampleProducts = products.map(product => \{\par
            return \{...product, user: adminUser\}                     //  INSERT IN SINGLE OBJECT\{product, user:adminUser\}\par
        \})\par
\par
        await Product.insertMany(sampleProducts)\par
        console.log('Date Imported!!!')\par
        process.exit()\par
\par
    \} catch (error) \{\par
        console.log(error)\par
        process.exit(1)\par
    \}\par
\}\par
\par
const destroyData = async () => \{                             \highlight3 // node backend/seeder -d\highlight0\par
    try \{\par
        await Order.deleteMany()\par
        await Product.deleteMany()\par
        await User.deleteMany()\par
\par
        console.log('Data destroyed');\par
    \}catch (error) \{\par
        console.log(error);\par
        process.exit(1)\par
    \}\par
\}\par
\par
if (process.argv[2] === '-d' )\{\par
    destroyData()\par
\}else\{\par
    importData()\par
\}\par
\highlight2 const express = require('express')                                                                                seeder var2        load file\par
const User = require('../models/userModel')\par
const data = require('../data')\par
const userRouter = express.Router()\par
userRouter.get('/seed',async (req, res) => \{\par
    const createUser = await User.\b insertMany\b0 (data.users)             or \b create\b0 (data.users)\par
    res.send(\{createUser\})\par
\})\par
module.exports = userRouter\par
\par
\highlight3 exports.newProduct = async(req, res, next) => \{                                                 var3\par
    const product = await Product.create(req.body)\par
    res.status(201).json(\{\par
        success:true,\par
        product\par
    \})\par
\}\par
router.post('/product/new').post(newProduct)\par
\highlight0\par
\par
\highlight5 root/package.json                                                \par
\highlight0   "scripts": \{\par
    "start": "node backend/server",\par
    "server": "nodemon backend/server",\par
    "client": "npm start --prefix frontend",\par
    "dev": "concurrently \\"npm run server\\" \\"npm run client\\"",\par
    "data:import": "node backend/seeder",\par
    "data:destroy": "node backend/seeder -d"\par
  \},\par
\par
\highlight5 backend/routes/productRoutes.js\par
\highlight2 npm i express-async-handler\par
\highlight0 import express from 'express'\par
const router = express.Router()\par
import Product from '../models/productModel.js'\par
import \highlight2 asyncHandler \highlight0 from 'express-async-handler'\par
\par
router.get('/', \highlight2 asyncHandler\highlight0 (async (req, res) => \{\par
    const products = await Product.find(\{\})\par
    res.json(products)\par
\} ))\par
\par
router.get('/:id',\highlight2 asyncHandler\highlight0 (async (req, res) => \{\par
    const product = await Product.findById(req.params.id)\par
\par
    if(product) \{\par
        res.json(product)\par
    \} else \{\par
        res.status(404)\par
        throw new Error('Product not found')\par
    \}\par
\}) )\par
export default router\par
\highlight5 backend/server.js\par
\highlight0 const express = require('express')\par
const app = express()\par
const connectDB = require('./config/db')\par
const productRoutes = require('./routes/productRoutes')\par
const dotenv = require('dotenv')\par
dotenv.config()\par
connectDB() \par
app.get('/', (req, res) => \{\par
    res.send('api running')\par
\})\par
\highlight2 app.use('/api/products', productRoutes)\par
\highlight0 const port = process.env.PORT || 5000\par
app.listen(port, console.log('server running on port 5000'))\par
\par
\highlight5\fs22 backend/server.js                                                                           \b error middleware\b0            4/9\par
\highlight0\fs16 // ERRORS\par
app.use(notFound)\par
app.use(errorHandler)          //  bellow app.get\par
\par
\highlight5 backend/middleware/errorMiddleware.js                                                                          \par
\highlight0 const notFound = (req, res, next) => \{\par
    const error = new Error(`Not Found = $\{req.originalUrl\}`)\par
    res.status(404)\par
    next(error)\par
\}\par
const errorHandler = (err, req, res, next) => \{\par
    const statusCode = res.statusCode === 200 ? 500 : res.statusCode\par
    res.status(statusCode)\par
    res.json(\{\par
        message: err.message,\par
        stack: process.env.NODE_ENV === 'production' ? null : err.stack,\par
    \})\par
\}\par
export \{ notFound, errorHandler \}\par
\highlight5 backend/routes/productRoutes.js                                                                          \par
\highlight0 router.get('/:id', asyncHandler(async(req, res)=> \{\par
    const product = await Product.findById(req.params.id)\par
    if (product)\{\par
        res.json(product)\par
    \}else\{\par
        res.status(404)\par
\cf1\fs22         throw new Error('Product not Found..')\par
\cf0\fs16     \}\par
\}))\par
\highlight6\fs40 #REDUX TRAVERSY   5\par
\highlight2\fs16 npm i redux react-redux redux-thunk --save redux-devtools-extension                     FRONTEND PACKAGE.JSON\fs40\par
\highlight0\fs16\par
\highlight5 frontend/src/store.js\par
\highlight0 import \{createStore, combineReducers, applyMiddleware\} from 'redux'\par
import thunk from 'redux-thunk'\par
import \{composeWithDevTools\} from 'redux-devtools-extension'\par
import \{productListReducer, productDetailsReducer\} from './reducers/productReducers'\par
const reducer = combineReducers(\{\par
    productList: productListReducer,\par
    productDetails:productDetailsReducer,\par
\})\par
const initialState =\{\}\par
\par
const store = createStore(\par
    reducer,\par
    initialState,\par
    composeWithDevTools(applyMiddleware(thunk))\par
)\par
export default store\par
\highlight2 import \{createStore, combineReducers, applyMiddleware, compose\} from 'redux'                                //var 2 store\par
import thunk from 'redux-thunk'\par
import \{loginReducer, registerReducer\} from './reducers/usersReducer'\par
const reducer = combineReducers(\{\par
    loginReducer,\par
    registerReducer\par
\})\par
const initialState = \{\par
    loginReducer: \{\par
        user: localStorage.getItem('token')? JSON.parse(localStorage.getItem('token')): null\par
    \},\par
\}\par
const composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\par
const store = createStore(\par
  reducer,\par
  initialState,\par
  composeEnhancer(applyMiddleware(thunk))\par
);\par
export default store\par
\highlight5 frontend/src/index.js\par
\highlight0 import React from 'react';\par
import ReactDOM from 'react-dom';\par
import './index.css';\par
import App from './App';\par
\par
\highlight3 import \{Provider\} from 'react-redux'\par
import store from './store'\par
\highlight0\par
ReactDOM.render(\par
       <Provider store=\{store\} >\par
          <App />\par
       </Provider>,\par
  document.getElementById('root')\par
);\par
reportWebVitals();\par
\par
\highlight5 frontend/src/reducers/productReducers.js\par
\highlight0 import \{PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL,\par
    PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL\par
\} from '../constants/productConstants'\par
\par
export const productListReducer = (state=\{products: []\}, action) => \{\par
    switch(action.type)\{\par
        case PRODUCT_LIST_REQUEST:\par
            return \{loading: true, products:[]\}\par
        case PRODUCT_LIST_SUCCESS:\par
            return \{loading: false, products: action.payload\}\par
        case PRODUCT_LIST_FAIL:\par
            return \{loading:false, error: action.payload\}\par
        default:\par
            return state\par
    \}\par
\}\par
\par
export const productDetailsReducer = (state=\{product:\{ reviews:[] \}\}, action) => \{\par
    switch(action.type)\{\par
        case PRODUCT_DETAILS_REQUEST:\par
            return \{loading: true, ...state \}\par
        case PRODUCT_DETAILS_SUCCESS:\par
            return \{loading:false, product: action.payload\}\par
        case PRODUCT_DETAILS_FAIL:\par
            return \{loading:false, error: action.payload\}\par
        default:\par
            return state\par
    \}\par
\}\par
\par
\highlight5 frontend/src/constants/productConstants.js\par
\highlight0 export const PRODUCT_LIST_REQUEST = 'PRODUCT_LIST_REQUEST'\par
export const PRODUCT_LIST_SUCCESS = 'PRODUCT_LIST_SUCCESS'\par
export const PRODUCT_LIST_FAIL = 'PRODUCT_LIST_FAIL'\par
export const PRODUCT_DETAILS_REQUEST = 'PRODUCT_DETAILS_REQUEST'\par
export const PRODUCT_DETAILS_SUCCESS = 'PRODUCT_DETAILS_SUCCESS'\par
export const PRODUCT_DETAILS_FAIL = 'PRODUCT_DETAILS_FAIL'\par
\highlight5 frontend/src/actions/productActions.js\par
\par
\highlight0 import \{PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL,\par
    PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL\par
\} from '../constants/productConstants'\par
import axios from 'axios'\par
export const listProducts = () => async(dispatch) => \{\par
    try\{\par
        dispatch(\{\par
            type:PRODUCT_LIST_REQUEST\par
        \})\par
\par
        const \{data\} = await axios.get('{{\field{\*\fldinst{HYPERLINK http://localhost:5000/api/products/ }}{\fldrslt{http://localhost:5000/api/products/\ul0\cf0}}}}\f1\fs16 ')\par
\par
        dispatch(\{\par
            type:PRODUCT_LIST_SUCCESS,\par
            payload:data\par
        \})\par
          \}catch(error)\{\par
              dispatch(\{\par
                type:PRODUCT_LIST_FAIL,\par
                payload: error.response && error.response.data.message?\par
                error.response.data.message : error.message\par
              \})\par
          \}\par
\}\par
export const listProductDetails = (id) => async(dispatch) => \{\par
    try\{\par
        dispatch(\{\par
            type:PRODUCT_DETAILS_REQUEST,\par
        \})\par
        const \{data\} = await axios.get(`http://localhost:5000/api/products/$\{id\}`)\par
        dispatch(\{\par
            type:PRODUCT_DETAILS_SUCCESS,\par
            payload:data\par
        \})\par
    \}catch(error)\{\par
        dispatch(\{\par
            type: PRODUCT_DETAILS_FAIL,\par
            payload: error.response && error.response.data.message?\par
            error.response.data.message: error.message\par
        \})\par
    \}\par
\}\par
\highlight5\par
\par
frontend/src/screens/HomeScreen.js\par
\highlight0 import React, \{useState, useEffect\} from 'react'\par
import \{Row, Col\} from 'react-bootstrap'\par
import Product from '../components/Product'\par
import \{listProducts\} from '../actions/productActions'\par
import \{useDispatch, useSelector\} from 'react-redux'\par
import Loader from '../components/Loader'\par
import Message from '../components/Message'\par
const HomeScreen = () => \{\par
    const dispatch = useDispatch()\par
    const productList = useSelector(state => state.productList)\par
    const \{loading, error, products\} = productList\par
    useEffect(()=>\{\par
        dispatch(listProducts())\par
    \}, [dispatch])\par
    return (\par
        <>\par
        <h1>Latest Products</h1>\par
        \{loading? <Loader/>:error? <Message variant='danger'> \{error\} </Message> : (\par
            <Row>\par
            \{products.map(p =>\par
                            <Col key=\{p._id\} sm=\{12\} md=\{6\} lg=\{4\} xl=\{3\}  >\par
                    <Product product=\{p\} />\par
                </Col>           \par
                )\}\par
            </Row>\par
        )\}\par
        </>\par
    )\}\par
export default HomeScreen\par
\highlight5 frontend/src/screens/ProductScreen.js\par
\highlight0 import React, \{useState, useEffect\} from 'react'\par
import \{Link\} from 'react-router-dom'\par
import \{Row, Col, Image, ListGroup, Card, Button\} from 'react-bootstrap'\par
import \{listProductDetails\} from '../actions/productActions'\par
import \{useSelector, useDispatch\} from 'react-redux'\par
import Loader from '../components/Loader'\par
import Message from '../components/Message'\par
import Rating from '../components/Rating'\par
const ProductScreen = (\{match\}) => \{\par
    const dispatch = useDispatch()\par
    const productList = useSelector(state => state.productDetails)\par
    const \{error, loading, product\} = productList\par
    useEffect(()=>\{\par
        dispatch(listProductDetails(match.params.id))\par
    \}, [dispatch, match])\par
    return (\par
        <>\par
        <Link className='btn btn-dark my-3' to='/' > Go Back </Link>\par
        \{loading? <Loader/>:error? <Message>\{error\}</Message>:\par
          <Row>\par
          <Col md=\{6\}>\par
                  <Image src=\{product.image\} alt=\{product.name\} fluid />\par
              </Col>\par
              <Col md=\{3\}>\par
                  <ListGroup variant='flush' >\par
                      <ListGroup.Item>\par
                          <h3>\{product.name\}</h3>\par
                      </ListGroup.Item>\par
                      <ListGroup.Item>\par
                          <Rating value=\{product.rating\} text=\{`$\{product.numReviews\} reviews` \}/>\par
                      </ListGroup.Item>\par
                  </ListGroup>\par
                  <ListGroup.Item>\par
                      Price: $\{product.price\}\par
                  </ListGroup.Item>\par
                  <ListGroup.Item>\par
                  Description: $\{product.description\}\par
                  </ListGroup.Item>\par
              </Col>\par
              <Col md=\{3\}>\par
                  <Card>\par
                      <ListGroup variant='flush' >\par
                          <ListGroup.Item>\par
                              <Row>\par
                                  <Col>\par
                                      Price:\par
                                  </Col>\par
                                  <Col>\par
                                  <strong>$\{product.price\}</strong>\par
                                  </Col>\par
                              </Row>\par
                              <Row>\par
                                  <Col>\par
                                      Status:\par
                                  </Col>\par
                                  <Col>\par
                                  <strong>\{product.countInStock > 0? 'In Stock':'Out of Stock'  \}</strong>\par
                                  </Col>\par
                              </Row>\par
                          </ListGroup.Item>\par
                          <ListGroup.Item>\par
                              <Button className='btn-block' type='button' disabled=\{product.countInStock === 0\}>Add To Cart</Button>\par
                          </ListGroup.Item>\par
                      </ListGroup>\par
                  </Card>\par
              </Col>\par
          </Row>\par
  \par
        \}\par
        \par
               </>\par
    )\par
\}\par
\par
export default ProductScreen\par
\highlight5\par
#PROMISE\par
\highlight1     reject(Error('Your cofee'))\highlight5\par
\highlight0 const path = require('path')\par
const fs = require('fs')\par
\par
\highlight5 const s1 = () => \{\par
    return new Promise((res, rej)=>\{        \par
        setTimeout(()=>\{\par
            console.log(1)\par
            res()\par
        \},1000)\par
    \})\par
\}\par
\par
const s2 = () => \{\par
    return new Promise((res, rej)=>\{\par
        console.log(2)\par
        res()\par
    \})\par
\}\par
\par
const x = async() =>\{\par
    await s1()\par
    await s2()\par
\}\par
\highlight0\par
let n \par
const s1 =() => \{\par
    return new Promise((res, rej)=>\{\par
        fs.readFile(path.join(__dirname,'f1.txt'),'utf8', (err,data) => \{\par
            if(err)\{\par
                \b return \b0 rej(err)\par
            \}\par
            n = JSON.stringify(data.split(' ').length)\par
            res()\par
    \})\par
\})\par
\}\par
\par
const s2 = () => \{\par
    return new Promise((res, rej)=> \{\par
        console.log('kkkkkkkkkk')\par
        fs.writeFile(path.join(__dirname, 'f2.txt'), n, err=>\{\par
            if(err)\{\par
                return rej(err)\par
            \}\par
        \})\par
        res()\par
    \})\par
\}\par
\par
const s3 =() => \{\par
    return new Promise((res, rej)=>\{\par
        fs.readFile(path.join(__dirname,'f2.txt'), 'utf8', (err,data) => \{\par
            if(err)\{\par
               return rej(err)\par
            \}\par
            console.log(data)\par
            res()\par
    \})\par
\})\par
\}\par
\par
const s4 = () => \{\par
    return new Promise((res, rej)=>\{\par
        fs.unlink(path.join(__dirname, 'f1.txt'), err =>\{\par
            if(err)\{\par
               return rej(err)\par
            \}\par
            console.log('removed!')\par
            res()\par
        \})\par
    \})\par
\}\par
\par
const m = async() => \{\par
    try \{\par
        await s1()\par
        await s2()\par
        await s3()\par
        await s4()\par
        \par
    \} catch (e) \{\par
        console.log(e)\par
    \}\par
\}\par
m()\par
\highlight5\fs28 #callback\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=DHvZLI7Db8E }}{\fldrslt{https://www.youtube.com/watch?v=DHvZLI7Db8E\ul0\cf0}}}}\f1\fs28\par
\highlight0\fs16 const x = false\par
    const x2 = false\par
    \par
    const f = (callback, errorCallback) => \{\par
        if(x)\{\par
            errorCallback(\{\par
                name:'user',\par
                error: 'x is false'\par
            \})\par
        \}else if(x2)\{\par
            errorCallback(\{\par
                name:'user2',\par
                error: 'x2 is false'\par
            \})\par
        \}else\{\par
            callback('Success')\par
        \}\par
    \}\par
    f((message)=>\{console.log(message)\}, (message)=> \{console.log(message.error + ' and ' + message.name)\})\par
\highlight5\b                                       or PROMISE DECISION\highlight0\par
\b0 const x = true\par
    const x2 = false\par
    \par
    const f =() =>  new Promise ((resolve, reject) => \{\par
        if(x)\{\par
            \highlight5 reject\highlight0 (\{\par
                name:'user',\par
                error: 'x is false'\par
            \})\par
        \}else if(x2)\{\par
            \highlight5 reject\highlight0 (\{\par
                name:'user2',\par
                error: 'x2 is false'\par
            \})\par
        \}else\{\par
            \highlight5 resolve\highlight0 ('Success')\par
        \}\par
    \par
    \}) \par
    \par
    f().then(\par
        (message)=>\{console.log(message)\}\par
    ).catch((message)=> \{console.log(message.error + ' and ' + message.name)\})\par
\highlight1\b\fs28 #AUTH..\par
\highlight5\b0\fs16 backend/index.js                                                     COOKIES\par
\highlight0 const cookieParser = require('cookie-parser')\par
app.use(cookieParser())\par
\highlight5 backend/utils/jwtToken.js                                                     COOKIES\par
\highlight2 const jwt = require('jsonwebtoken')\par
const sendToken = (user, statusCode, res) => \{\par
    const token = jwt.sign(\{user\}, 'secret', \{expiresIn:'30d'\})\par
    const options =\{\par
        expires: new Date(\par
            Date.now() + 7*24*60*60*1000\par
        ),\par
        httpOnly:true\par
    \}\par
    res.status(statusCode).cookie('token', token, options).json(\{\par
        success:true,\par
        token,\par
        user\par
    \})\par
\}\par
module.exports = sendToken\par
\highlight5 backend/controllers/userController.js\par
\highlight0 const asyncHandler = require('express-async-handler')\par
const User = require('../models/userModel')\par
const generateToken = require('../utils/generateToken')\par
// Auth user & get token\par
// POST /api/users/\highlight2\b login\highlight0\b0\par
// Public\par
\b const authUser = asyncHandler(async(req, res) => \{\par
\b0     const \{email, password\} = req.body\par
    const user = await User.findOne(\{email\})\par
    if(user && (await user.matchPassword(password)))\{\par
        res.json(\{\par
            _id: user._id,\par
            name: user.name,\par
            email: user.email,\par
            isAdmin: user.isAdmin,\par
            token: generateToken(user._id)\par
        \})\par
    \}else\{\par
        res.status(401)\par
        throw new Error('Invalid email or password..')\par
    \} \par
\})\par
\highlight2 userRouter.post('/signin',asyncHandler( async(req, res) => \{\par
        const \{email, password\} = req.body                                                                                            //      var2 login\par
        const user = await User.findOne(\{email\})\par
        if(user)\{\par
            if(bcrypt.compareSync(password, user.password))\{\par
                res.send(\{\par
                    _id: user._id,\par
                    name: user.name,\par
                    email: user.email,\par
                    token: generateToken(user)\par
                \})\par
                return\par
            \}              \par
        \}\par
        res.status(401).send(\{message:"Invalid email or password"\})\par
\}))\par
\highlight0 // Get User Profile\par
// GET /api/users/profile\par
// access Private\par
\b const getUserProfile = asyncHandler(async(req, res) => \{\par
\b0     const user = await User.findById(req.user._id)\par
    if (user)\{\par
        res.json(\{\par
            _id:user._id,\par
            name: user.name,\par
            email: user.email,\par
            isAdmin: user.isAdmin\par
        \})\par
    \}else\{\par
        res.status(404)\par
        throw new Error('User not Found..')\par
    \}\par
\})\par
// Register a new user\par
// POST /api/users\par
// access Public\par
\b const \highlight2\fs20 registerUser \highlight0\fs16 = asyncHandler(async(req, res)=> \{\par
\b0     const \{name, email, password\} = req.body\par
\cf1 if(!/^(([^<>()\\[\\]{{\field{\*\fldinst{HYPERLINK "\\\\\\\\.,;:\\\\s@"}}{\fldrslt{\ul\cf4\cf4\ul\\\\.,;:\\s@"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@"]+)*)|(".+"))@((\\[[0-9]\{1,3\}\\.[0-9]\{1,3\}\\.[0-9]\{1,3\}\\.[0-9]\{1,3\}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]\{2,\}))$/.test(email}}}}\f1\fs16 ))\{\par
            return M.toast(\{html:'Enter correct email address'\})\par
        \}\par
\cf0     const userExists = await User.findOne(\{email\})\par
    if(userExists)\{\par
        res.status(400)\par
        throw new Error('User already exists')\par
    \}\par
    const user = await User.create(\{\par
        name,\par
        email,\par
        password\par
    \})\par
    if(user)\{\par
        res.status(201).json(\{\par
            _id:user._id,\par
            name: user.name,\par
            email: user.email,\par
            isAdmin: user.isAdmin\par
        \})\par
    \}else\{\par
        res.status(400)\par
        throw new Error('Invalid user data..')\par
    \}\par
\})\par
\highlight5\b\fs22 LOGOUT FRONTEND\par
\highlight3\b0\fs16 export const signout = () => (dispatch) => \{\par
  localStorage.removeItem('userInfo');\par
  localStorage.removeItem('cartItems');\par
  localStorage.removeItem('shippingAddress');\par
  dispatch(\{ type: USER_SIGNOUT \});\par
  document.location.href = '/signin';\par
\};\par
\highlight0\par
\highlight2 const submitHandler = (e) => \{                                                   confirm passwords in frontend\par
        e.preventDefault()\par
        if(password !== confirmPassword)\{\par
            alert('Password and Confirm password are not match')\par
        \}else\{\par
            dispatch(register(name,email, password))\par
        \}\par
    \}\par
\highlight3 const redirect = props.location.search                                                                  redirect                         \par
    ? props.location.search.split('=')[1]\par
    :'/'\par
\highlight0 // Update user profile\par
// PUT /api/users/profile\par
// Private\par
const \b updateUserProfile\b0 =asyncHandler(async(req, res) => \{\par
    const user = await User.findById(req.user._id)\par
    if(user)\{\par
        user.name = req.body.name || user.name\par
        user.email = req.body.email || user.email\par
        if (req.body.password)\{\par
            user.password = req.body.password\par
        \}\par
        const updatedUser = await user.save()\par
        res.json(\{\par
            _id: updatedUser._id,\par
            name: updatedUser.name,\par
            email: updatedUser.email,\par
            isAdmin: updatedUser.isAdmin,\par
            token: generateToken(updatedUser._id)\par
        \})\par
    \}else\{\par
        res.status(404)\par
        throw new error('User not Found')\par
    \}\par
\})\par
module.exports = \{authUser, getUserProfile, registerUser, updateUserProfile \}\par
\highlight5 backend/models/userModels.js\par
\highlight0 userSchema.methods.matchPassword = async function(enteredPassword)\{\par
    return \b await \b0 bcrypt.compare(enteredPassword, this.password)\}\par
\par
userSchema.pre('save', async function (next)\{ \par
    if (!this.isModified('password'))\{\par
        next()\par
    \}\par
    const salt = await bcrypt.genSalt(10)\par
    this.password = await bcrypt.hash(this.password, salt)\par
\})\par
\highlight5 backend/utils/generateToken.js\par
\highlight0 const jwt = require('jsonwebtoken')\par
const generateToken = (id) => \{\par
    return jwt.sign(\{id\}, process.env.JWT_SECRET, \{expiresIn:'30d'\})\}       \par
module.exports = generateToken\par
exports.\highlight2\b\fs24 logout \highlight0\b0\fs16 = async(req, res, next) => \{                          // cookie variant\par
    res.cookie('token',null, \{\par
        expires: new Date(Date.now()),\par
        httpOnly:true\par
    \})\par
    res.status(200).json(\{\par
        success:'true',\par
        message:'Loged out'\par
    \})\par
\}\par
\b\fs20 router.route('/logout').get(logout)\par
\highlight5\b0\fs16 backend/MiddleWare/authMiddleWare.js                                                       #\b PROTECT                                                                                     \b0\par
\highlight0\b const jwt = require('jsonwebtoken')\par
const asyncHandler = require('express-async-handler')\par
const User = require('../models/userModel')\par
const protect = asyncHandler(async(req, res, next) => \{\par
    let token\par
    if (\par
        req.headers.authorization &&\par
        req.headers.authorization.startsWith('Bearer')\par
    )\{\par
        try\{\par
            token = req.headers.authorization.split(' ')[1]\par
            const decoded = jwt.verify(token, process.env.JWT_SECRET)\par
            req.user = await User.findById(decoded.id).select('-password')\par
            next()\par
        \}catch(error)\{\par
            console.error(error)\par
            res.status(401)\par
            throw new Error('Not authorized, token failed..')\par
        \}\par
    \}\par
    if (!token)\{\par
        res.status(401)\par
        throw new Error('Not authorized, no token..')\par
    \}\par
\})\par
module.exports = protect\par
\cf7\highlight5\b0\par
\highlight0 const jwt = require('jsonwebtoken')                                                // VARIANT 2\par
const mongoose = require('mongoose')\par
const User = mongoose.model('User')\par
\b module.exports\b0  = (req, res, next) => \{\par
const \{authorization\} = req.headers\par
if(!authorization)\{\par
    return res.status(401).json(\{error:'You must be logged in..'\})\par
        \}\par
const token = authorization.replace('Bearer ','')\par
\par
jwt.verify(token, process.env.JWT_SECRET, (err, payload)=>\{\par
    if(err)\{\par
        return res.status(401).json(\{error:'you must be logged in!!'\})\par
    \}\par
    const \{_id\} = payload\par
    User.findById(_id).then(user=>\{\par
        req.user = user\par
    next()\par
    \})\par
\})\par
\}\par
\cf8 export const isAuth = (req, res, next) => \{                                                                      // Basir variant 3\par
  const authorization = req.headers.authorization;\par
  if (authorization) \{\par
    const token = authorization.slice(7, authorization.length); // Bearer XXXXXX\par
    jwt.verify(\par
      token,\par
      process.env.JWT_SECRET || 'somethingsecret',\par
      (err, decode) => \{\par
        if (err) \{\par
          res.status(401).send(\{ message: 'Invalid Token' \});\par
        \} else \{\par
          req.user = decode;\par
          next();\par
        \}\par
      \}\par
    );\par
  \} else \{\par
    res.status(401).send(\{ message: 'No Token' \});\par
  \}\par
\};\par
\cf0 const jwt = require('jsonwebtoken')                                                // var 3 PROTECT BY COOKIE\par
const User = require('../models/user')\par
exports.protect = async(req, res, next) => \{\par
    const \{token\} = req.cookies \par
    if(!token)\{\par
        return res.status(401).json(\{message:'To Token'\})\par
        next()\par
    \}\par
   try\{\par
    const decoded = jwt.verify(token, 'secret')\par
    req.user = await User.findById(decoded.id)\par
    next()\par
   \}catch(err)\{\par
       res.send(err)\par
   \}\par
\}\cf7\highlight2 const PaymentMethodScreen = (props) => \{                                                   FRONTEND PROTECT VARIANT redux variant\par
    const cart = useSelector(state=>state.cart)\par
    const \{shippingAddress\}=cart\par
    if(!shippingAddress.address)\{\par
        props.history.push('/shiping')\par
    \}\par
\cf0\highlight1             window.location.reload()                                    #reload\highlight2\par
\cf7\highlight6 import React from 'react'\par
import \{Redirect\} from 'react-router-dom'                                                                      protect frontend 2\par
\par
const Profile = () => \{\par
    const id1 = JSON.parse(localStorage.getItem('id'))\par
    const id2 = JSON.parse(localStorage.getItem('user'))\par
    \par
    if(id1 && id1 == id2._id)\{\par
       return  (\par
           <h2>Sectrt</h2>\par
       )\par
    \}\par
    return (\par
        <Redirect to='/'/>\par
    )\par
\}\par
export default Profile\par
\highlight2\par
\par
module.exports = \{                                                                                                              # google protect\par
    ensureAuth: (req, res, next) => \{\par
        if(req.isAuthenticated())\{\par
            return next()\par
        \}else\{\par
            res.redirect('/')\par
        \}\par
    \},\par
    ensureGuest: (req, res, next) => \{\par
        if(req.isAuthenticated())\{\par
            res.redirect('/dashboard')\par
        \}else\{\par
            return next()\par
        \}\par
    \}\par
\} \par
\cf0\highlight5 frontend/src/index.js\par
\highlight0 import React from 'react';\par
import \{Provider\} from 'react-redux'\par
\b import store from './store'\par
\b0 import ReactDOM from 'react-dom';\par
import App from './App';\par
ReactDOM.render(\par
\b <Provider store=\{store\}>\par
\b0 <React.StrictMode>\par
    <App />\par
  </React.StrictMode>\par
\b </Provider>,\par
\b0   document.getElementById('root')\par
);\par
\highlight5 frontend/src/reducers/userReducers.js\par
\highlight0\par
\highlight5 frontend/src/store\par
\highlight0 import \{createStore, compose, applyMiddleware, combineReducers\} from 'redux'\par
import thunk from 'redux-thunk'\par
import \{ productListReducer, productListDetailsReducer \} from './reducers/productReducer'\par
import \{ cartReducer \} from './reducers/cartReducers'\par
import \{ userSigninReducer, userRegisterReducer \} from './reducers/userReducers'\par
    cart : \{\par
        cartItems: localStorage.getItem('cartItems')?\par
        JSON.parse(localStorage.getItem('cartItems'))\par
        :[],\par
        shippingAddress: localStorage.getItem('shippingAddress')\par
        ?JSON.parse(localStorage.getItem('shippingAddress'))\par
        :\{\},\par
        paymentMethod:'PayPal'\par
    \}\par
\}\par
const reducer = combineReducers(\{\par
    productList: productListReducer,\par
    productDetails: productListDetailsReducer,\par
    cart: cartReducer,\par
    userSignin: userSigninReducer,\par
    userRegister: userRegisterReducer\par
\})\par
const composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\par
const store = createStore(reducer, initialState, composeEnhancer(applyMiddleware(thunk)))\par
export default store\par
\par
\highlight5\par
\highlight6\b\fs24 #FILES#UPLOAD                                                                                                     \par
1.#express-fileupload\par
\highlight0\b0\fs16  npm i express-fileupload                               {{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=b6Oe2puTdMQ }}{\fldrslt{https://www.youtube.com/watch?v=b6Oe2puTdMQ\ul0\cf0}}}}\f1\fs16          \highlight1 36min PROGRESS BAR\highlight0\par
\highlight5 serves.js  \par
\highlight0 const fileUpload = require('express-fileupload')\par
const fs = require('fs')\par
app.use(fileUpload(\{))\par
exports.newproduct = async(req, res)=>\{\par
    if(req.files === null)\{\par
        return res.status(400).json(\{message:'No file uploaded..'\})\par
    \}\par
    const file = req.files.file\par
    const path = __dirname.split('backend')[0] + 'frontend{{\field{\*\fldinst{HYPERLINK "\\\\\\\\public\\\\\\\\uploads\\\\\\\\'"}}{\fldrslt{\\\\public\\\\uploads\\\\'\ul0\cf0}}}}\f1\fs16  + file.name\highlight6\par
    if(fs.existsSync(path))\{\par
        return res.status(400).send(\{message:'File Already exists'\})                             //check if file exists\par
        \}\par
\highlight0         file.mv(path, err=> \{\par
            if(err)\{\par
                console.error(err)\par
                return res.status(500).send(err)\par
            \}\par
        res.json(\{fileName: file.name, filePath: `/uploads/$\{file.name\}`\})\par
        \})\par
\par
    \}\highlight2 const upload = async(file) =>\{                                                              #mulitple files variant\par
        for(let f of file)\{\par
            const formData = new FormData()\par
            formData.append('file', f)\par
        try\{\par
            const data = await axios.post('{{\field{\*\fldinst{HYPERLINK http://localhost:5000/api/admin }}{\fldrslt{http://localhost:5000/api/admin\ul0\cf0}}}}\f1\fs16 ', formData, \{headers:\{'Content-Type':'multipart/form-data'\}\} )\par
            console.log(data, 'dataaaaaaaaa')\par
        \}catch(e)\{\par
            if(e.response.status === 500)\{\par
                console.log('Problem with server')\par
            \}else\{\par
                console.log(e.response)\par
            \}\par
        \}\par
        \}\par
\highlight5\b frontend/screen.js  \par
\highlight0\b0 import React, \{useState\} from 'react'\par
import axios from 'axios'\par
import Progress from '../components/Progress'\par
\b const CreatePost = () => \{\par
\b0     const [file, setFile] = useState()\par
    const [filename, setFilename] = useState('Choose File')\par
    const [uploadedFile, setUploadedFile] = useState(\{\})\par
    const [uploadPercentage, setUploadPercentage] = useState(0)\par
    const onChange = e => \{\par
        setFile(e.target.files[0])\par
        setFilename(e.target.files[0].name)\par
    \}\par
    const onSubmit = async e => \{\par
        e.preventDefault()\par
        const formData = new FormData()\par
        formData.append('file', file)             \cf1\b //    console.log(formData.getAll('file'))\par
or\par
\cf0\highlight1\b0         formData.append('file', file, file.name)   to blob\highlight0             \par
\par
        try\{\par
            const res = await axios.post('{{\field{\*\fldinst{HYPERLINK http://localhost:5000/upload }}{\fldrslt{http://localhost:5000/upload\ul0\cf0}}}}\f1\fs16 ', formData, \{\par
                headers:\{\par
                    'Content-Type':'multipart/form-data'\par
                \},\par
                onUploadProgress: progressEvent => \{\par
                    setUploadPercentage(parseInt(Math.round((progressEvent.loaded *100) / progressEvent.total)))\par
                    // Clear percentage after 10 sec\par
                setTimeout(()=> setUploadPercentage(0), 10000)\par
                \}\par
                            \})\par
            const \{fileName, filePath\} = res.data \par
            setUploadedFile(\{fileName, filePath\})\par
\par
        \}catch(err)\{\par
            if(err.response.status === 500)\{\par
                console.log('Problem with server..')\par
            \}else\{\par
                console.log(err.response.data.msg)\par
            \} \par
        \}\par
    \}\par
    return (\par
        <div>\par
            <form onSubmit=\{onSubmit\} >\par
\b                 <input\highlight2  multiple=\{true\}\highlight0  type='file' onChange=\{onChange\} />\par
\b0                 <label>\{filename\}</label>\par
                                 <input type='submit'/>\par
            </form>\par
            \{uploadedFile? \par
            <div>\par
                <h3> \{uploadedFile.fileName\} </h3>\par
                <img src=\{uploadedFile.filePath\}/>\par
                <h6>\{uploadedFile.filePath\}</h6>\par
            </div>\par
            : null\}\par
\par
<Progress value=\{uploadPercentage\} max=\{100\}/>\par
        </div>\par
    )\par
\}\par
export default CreatePost\par
\highlight5 frontend/components/progress.js  \par
\highlight0 import React from 'react'\par
import PropTypes from 'prop-types'\par
const Progress = (\{value, max\}) => \{\par
    return (\par
        <progress value=\{value\} max=\{max\} style=\{\{width:'1233px', height:'50px'\}\} />\par
    )\par
\}\par
Progress.propTypes = \{\par
    value: PropTypes.number.isRequired,\par
    max: PropTypes.number\par
\}\par
\par
Progress.defaultProps = \{\par
    max:100\par
\}\par
export default Progress\par
\highlight3\b\fs22 INSTAGRAM VARIANT                                          \par
\highlight5\b0\fs16 frontend/components/CreatePost.js  \par
\highlight0 import React, \{useState\} from 'react'\par
import \{useHistory\} from 'react-router-dom'\par
import axios from 'axios'\par
const CreatePost = () => \{\par
  const history = useHistory()\par
  const [title, setTitle] = useState('')\par
  const [body, setBody] = useState('')\par
  const [image, setImage] = useState('')\par
  const PostDetails = async() => \{\par
    const formData = new FormData()\par
    formData.append('file',image)\par
    formData.append('body',body)\par
    formData.append('title',title)\par
    try\{   \par
        const res = await axios.post('{{\field{\*\fldinst{HYPERLINK http://localhost:5000/createpost',formData }}{\fldrslt{http://localhost:5000/createpost',formData\ul0\cf0}}}}\f1\fs16 , \{headers:\{"Content-Type":'multipart/form-data'\}\})\par
        history.push('/')\par
        console.log(res,'res-------------------')\par
    \}catch(err)\{\par
      if(err.response.status ===500)\{\par
        console.log('Problem with server 500..')\par
      \}else\{\par
        console.log(\cf7\b\fs36 err.response\cf0\b0\fs16 .data.msg, ',,,,,,,,,,,,,,,,catch')\par
      \}\par
    \}\par
  \}\par
    return (\par
        <div className='card input-filed'\par
        style=\{\{\par
            margin:'10px auto',\par
            maxWidth:'500px',\par
            padding:'20px',\par
            textAlign:'center'\par
        \}\}>\par
            <input type='text' placeholder='title' value=\{title\} onChange=\{e=>setTitle(e.target.value)\} required/>\par
            <input type='text' placeholder='body' value=\{body\} onChange=\{e=>setBody(e.target.value)\} required/>\par
            <div className="file-field input-field">\par
      <div className="btn">\par
        <span>Upload Image</span>\par
        <input type="file" onChange=\{e=>setImage(e.target.files[0])\} />\par
      </div>\par
      <div className="file-path-wrapper">\par
        <input className="file-path validate" type="text"/>\par
      </div>\par
    </div>\par
    <button onClick=\{PostDetails\} className='btn' >Submit Post</button>\par
        </div>\par
    )\par
\}\par
export default CreatePost\par
\highlight5 backend/routes/posts.js  \par
\highlight0 router.post('/createpost',async (req, res) => \{\par
    const \{title, body\} = req.body\par
    if(!title || !body)\{\par
        return res.status(422).json(\{msg:'Please, add all fields ..'\})\par
    \}\par
    const file = req.files.file\par
    try \{\par
     await Post.create(\{\par
         title,\par
         body,\par
         photo:"hello",\par
         postedBy:title\par
     \}) \par
     res.json(\{title, body\})\par
     await file.mv(`C:/Users/mso30/OneDrive/\f2\lang1049\'d0\'e0\'e1\'ee\'f7\'e8\'e9 \'f1\'f2\'ee\'eb/react2/frontend/public/uploads/$\{file.name\}`,err=> \{\par
        if(err)\{\par
            console.log(err)\par
            return res.status(500).send(err,'------err')\par
        \}\par
    \}, )\par
   \} catch(error) \{\par
       console.log(error,'errrrrrrrrrrrrrr')\par
   \}\par
\})\par
\highlight6\f1\fs22\lang1033 2.#multer                                                                                       \par
\highlight0\b\lang9\par
\b0\fs16\par
\highlight6\b\fs28 #useREf                                                                                                                                \par
\highlight0\b0\fs16\par
\b import React,\{useState, useEffect, useRef\} from 'react'\par
\b0 const Title = () => \{\par
    const [name, setName] = useState(0)\par
    const renderCount = useRef(0)\par
    // useEffect(()=>\{\par
        renderCount.current = renderCount.current +1                            // How many times changed  useState by  input or button\par
    // \})\par
        return (\par
        <div className='title' >\par
            <div>\{renderCount.current\} times render </div>\par
            <input onChange=\{e=>setName(e.target.value)\} />\par
            <button onClick=\{e => setName(name+1)\}>Add</button>\par
        </div>\par
    )\par
\}\par
export default Title\par
f\par
\b import React,\{useState, useEffect, useRef\} from 'react'\par
\b0 const Title = () => \{\par
    const [name, setName] = useState('')\par
    const inputRef = useRef()\par
    const input2Ref = useRef()\par
    const x = () => \{\par
        console.log(inputRef.current.value)        \b    // get entered data\par
\b0         input2Ref.current.focus()                               \b // get focus\par
\b0     \}\par
            return (\par
        <div className='title' >\par
            <input ref=\{inputRef\} value=\{name\} onChange=\{e=>setName(e.target.value)\} />\par
            <input ref=\{input2Ref\} />\par
            <h2>\{name\}</h2>\par
            <button onClick=\{x\}>Add</button>\par
        </div>\par
    )\par
\}\par
export default Title\par
\par
\b import React,\{useState, useEffect, useRef\} from 'react'\par
\b0 const Title = () => \{\par
    const [name, setName] = useState('')\par
    const prev = useRef('')\par
    useEffect(()=>\{\par
        prev.current = name                                                            \b // get previous value\b0\par
    \},[name])\par
            return (\par
        <div className='title' >\par
            <input onChange=\{e=>setName(e.target.value)\} />\par
            <h2>\{name\} previous name= \{prev.current?prev.current:'no previos name yet'\} </h2>\par
        </div>\par
    )\par
\}\par
export default Title\par

\pard\sl240\slmult1\par

\pard\sl276\slmult1\par

\pard\sl240\slmult1\highlight6\b\fs24 #NODEMAILER..                                                                                          \par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=Va9UKGs1bwI }}{\fldrslt{https://www.youtube.com/watch?v=Va9UKGs1bwI\ul0\cf0}}}}\f1\fs24\par
{\fs20{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=9zEhGUIUwxY&list=PLurIMwd6GdCiv8ZhpqcwqpFM5Ez4JGago&index=3 }}{\fldrslt{https://www.youtube.com/watch?v=9zEhGUIUwxY&list=PLurIMwd6GdCiv8ZhpqcwqpFM5Ez4JGago&index=3\ul0\cf0}}}}\f1\fs20            //atach file  \fs24\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=Va9UKGs1bwI }}{\fldrslt{https://www.youtube.com/watch?v=Va9UKGs1bwI\ul0\cf0}}}}\f1\fs24                      // google\par

\pard\sl276\slmult1\highlight5\b0\fs16 const nodemailer = require('nodemailer')\par
\highlight1 Less secure app access  ON              on google account !!!\highlight5\par
\highlight2 let transporter = nodemailer.createTransport(\{                                                  //start\par
    service: 'gmail',\par
    auth: \{\par
        user: 'werrqqq3@gmail.com',                      // to env!!!\par
        pass: '111333Aa+'\par
    \}\par
\}) \par
\par
let mailOptions = \{\par
    from: 'astarta',\par
    to: '304545@mail.ru',                                                                              //to: '304545@mail.ru', 'mmmm@ya.ru'                  multiple \par
    subject: 'Test 1',\par
    html: 'text of msg'\par
\}\par
\par
const send = () => \{transporter.sendMail(mailOptions, (err, data) => \{\par
    if(err)\{\par
        console.log(err)\par
    \}else\{\par
        console.log('Email sent', data)\par
    \}\par
\})\par
\}\par
module.exports = send\par
\par
\highlight5\par
backend/index.js\par
\highlight0 app.use(express.urlencoded(\{extended:false\}))\par
let user = undefined\par
app.post('/registration', (req, res)=>\{\par
    if(!req.body.email || !req.body.pass) return res.sendStatus(400)\par
    const message = \{\par
        to: req.body.email,\par
        subject: 'Congratulation! You are succesfully registered on our site',\par
        html:`<h2>You succesfully registered!</h2>\par
        <i>Data:</i>\par
        <ul>\par
        <li>login:$\{req.body.email\}</li>\par
        <li>password: $\{req.body.pass\}</li>\par
        <li>Do not answer!</li>\par
        <ul>\par
        $\{req.body.promo? `To unsubscribe click to  <a href='{{\field{\*\fldinst{HYPERLINK http://localhost:5000/unsubscribe/$\{req.body.email\}'>Unsubscribe }}{\fldrslt{http://localhost:5000/unsubscribe/$\{req.body.email\}'>Unsubscribe\ul0\cf0}}}}\f1\fs16  </a>`:''\}\par
        `\par
    \}\par
    mailer(message)\par
    console.log(req.body)\par
    user = req.body\par
    res.redirect('/registration')\par
\})\par
app.get('/registration', (req, res)=>\{\par
    if(typeof user !== 'object') return res.sendFile(__dirname + '/registration.html')\par
    res.send(`Registered succesfully, email send on $\{user.email\}`)\par
    user = undefined\par
\})\par
app.get('/unsubscribe/:email', (req, res) => \{\par
    console.log( req.params.email, ' unsubscribed')\par
    res.send('Your email ' + req.params.email + ' unsubscribed')\par
 \par
\highlight5 backend/nodemailer.js\par
\highlight0 const nodemailer = require('nodemailer')\par
const transporter = nodemailer.createTransport(\{\par
    host: 'smtp.yandex.ru',\par
    port: 465,\par
    secure:true,\par
    auth: \{\par
        user: 'mso2000@yandex.ru',\par
        pass: '111333Aa+'\par
    \}\par
\}, \{        from:'Mailer Test <mso2000@yandex.ru>',\par
\});\par
const mailer = message => \{\par
    transporter.sendMail(message, (err, info) => \{\par
        if(err) return console.log(err)\par
        console.log('Email sent: ', info)\par
    \})\par
\}\par
module.exports = mailer\par
\highlight5 backend/registration.html  \par

\pard\ri-1066\sl276\slmult1\highlight0 <div class="container">\par
        <div class="row justify-content-md-center">\par
                    <div class="col-md-auto">\par
          <form method="POST" action="{{\field{\*\fldinst{HYPERLINK http://localhost:5000/registration }}{\fldrslt{http://localhost:5000/registration\ul0\cf0}}}}\f1\fs16 " >\par
        <div class="mb-3">\par
          <label for="exampleInputEmail1" class="form-label">Email address</label>\par
          <input type="email" name="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp"  />\par
          <div id="emailHelp" class="form-text">We'll never share your email with anyone else.</div>\par
        </div>\par
        <div class="mb-3">\par
          <label for="exampleInputPassword1" class="form-label">Password</label>\par
          <input type="password" name="pass" class="form-control" id="exampleInputPassword1" required />\par
        </div>\par
        <div class="mb-3 form-check">\par
          <input type="checkbox" name="promo" class="form-check-input" id="exampleCheck1" required />\par
          <label class="form-check-label" for="exampleCheck1">Check me out</label>\par
        </div>\par
        <button type="submit" class="btn btn-primary">Submit</button>\par
      </form>    </div>\par
                  </div>\par
      </div\par
\par
\highlight6\fs20 EMAIL VERIFICATION                                                                                                         \par
\par
\highlight2\fs16 router.post('/signup',async(req, res) => \{\par
\highlight0     const \{username, email, password\} = req.body\par
    if(!username || !email || !password)\{\par
        return res.status(422).json(\{error:"Please, fill out all fields"\})\par
    \}\par
    const emailExists = await User.findOne(\{email\})\par
    if(emailExists)\{\par
        return res.status(400).json(\{error:"Email, already exists"\})  \par
    \}\par
    const salt = await bcrypt.genSalt(10)\par
    hashPassword = await bcrypt.hash(password, salt)\par
    // mail\par
    const token = jwt.sign(\{username, email, password:hashPassword\},'secret',  \{ expiresIn: '3d'\})\par
\par
    \highlight3 mailer\highlight0 (\{\par
        to:req.body.email,\par
        subject:'hello',\par
        html:`http://localhost:5000/verify/$\{req.body.email\}/$\{token\}`\par
    \})\par
    res.status(200).json(\{message:'Confirm Registration by email'\})\par
    // try\{                                                                                                                    \highlight6 if create model in register\highlight0\par
    //     await User.create(\{\par
    //         name:username,\par
    //         email:email,\par
    //         password:hashPassword\par
    //     \})\par
    //     res.status(200).json(\{message:"Registere Succesfully!!"\})\par
    // \}catch(error)\{\par
    //     res.status(400).json(\{error\})\par
    // \}\par
\})\par
\par
\highlight2 router.get('/verify/:email/:id',async (req, res) => \{\par
\highlight0     const token = req.params.id   \par
    try\{\par
        const decoded = jwt.verify(token,'secret')\par
        \par
        if(decoded)\{\par
            await User.create(\{\par
                name:decoded.username,\par
                email:decoded.email,\par
                password:hashPassword\par
            \})\par
            res.sendFile(__dirname+'/test.html')\par
        \}\par
    \}catch(err)\{\par
        res.sendFile(__dirname + '/test2.html')\par
    \}\par
\})\par

\pard\sl276\slmult1\highlight5 backend/nodemailer.js  \highlight0\par
const nodemailer = require('nodemailer')\par
const transporter = nodemailer.createTransport(\{\par
    host: 'smtp.yandex.ru',\par
    port: 465,\par
    secure:true,\par
    auth: \{\par
        user: 'mso2000@yandex.ru',\par
        pass: '111333Aa+'\par
    \}\par
\}, \{        from:'Mailer Test <mso2000@yandex.ru>',\par
\});\par
const \highlight3 mailer \highlight0 = message => \{\par
    transporter.sendMail(message, (err, info) => \{\par
        if(err) return console.log(err)\par
        console.log('Email sent: ', info)\par
    \})\par
\}\par
module.exports = mailer\par

\pard\ri-1066\sl276\slmult1\highlight6\b\fs20 RESET PASSWORD                                                                                                                                       \par

\pard\sl276\slmult1\highlight5\b0\fs16 backend/reset-password.js  \par
\highlight0 router.post('/reset-password', async (req, res) => \{\par
        try\{\par
            const user = await User.findOne(\{email:req.body.email\})\par
         if(user)\{\par
            const token = jwt.sign(\{_id:user.id\}, 'secret', \{expiresIn:"1d"\})\par
            user.resetToken = token\par
            await user.save()\par
            mailer(\{\par
                to: req.body.email,\par
                subject:"Link Reset Password",\par
                html:`<h1>  {{\field{\*\fldinst{HYPERLINK http://localhost:3000/new-password/$\{token\} }}{\fldrslt{http://localhost:3000/new-password/$\{token\}\ul0\cf0}}}}\f1\fs16  </h1> `\par
            \})\par
            return res.status(200).json(\{success:true,message:'Link send by imail'\})\par
        \}\par
         return res.status(200).json(\{success:false, message:'Email does not exists'\})\par
        \}catch(err)\{\par
            res.json(\{err\})\par
        \}\par
\})\par
\highlight5 frontend/reset-password.js  \par
\highlight0 import React, \{useState\} from 'react'\par
import axios from 'axios'\par
const ResetPassword = () => \{\par
    const [email, setEmail] = useState('')\par
    const sendEmail = async (e) => \{\par
        e.preventDefault()\par
        const \{data\} = await axios.post('{{\field{\*\fldinst{HYPERLINK http://localhost:5000/reset-password }}{\fldrslt{http://localhost:5000/reset-password\ul0\cf0}}}}\f1\fs16 ', \{email\})\par
        if(data.success)\{\par
            console.log('email send')\par
        \}else\{\par
            console.log(data.message)\par
        \}\par
    \}\par
    return (\par
        <form>\par
            <input type='email' placeholder='enter email' onChange=\{e=>setEmail(e.target.value)\}/>\par
            <button onClick=\{sendEmail\} type='submit'>Submit</button>\par
        </form>\par
    )\par
\}\par
export default ResetPassword\par
\par
\highlight5 backend/reset-password.js  \highlight0\par

\pard\ri-1066\sl276\slmult1 router.post('/reset-password/:token', async(req, res) => \{\par
    const user = await User.findOne(\{resetToken:req.params.token\})\par
    if(req.body.password)\{\par
        try\{\par
            const salt = await bcrypt.genSalt(10)\par
            hashPassword = await bcrypt.hash(req.body.password, salt)\par
            user.password = hashPassword\par
            await user.save()\par
            res.status(200).json(\{message:'New Pasword Saved'\})\par
        \}catch(err)\{\par
            res.json(\{message:err.message\})\par
        \}\par
    \}else\{\par
        try\{        \par
            if(!user.resetToken)\{\par
                return res.status(400).json(\{message: user.resetToken\})\par
               \}\par
            const decoded = jwt.verify(user.resetToken, 'secret')\par
            if(decoded)\{\par
                return res.status(200).json(\{message:'decoded'\})\par
            \}\par
            \}catch(err)\{\par
               res.json(\{message:err.message\})\par
           \}\par
    \}\par
\})\par

\pard\sl276\slmult1\highlight5 frontend/reset-password.js  \highlight0\par

\pard\ri-1066\sl276\slmult1 import React, \{useState\} from 'react'\par
import axios from 'axios'\par
const ResetPassword = () => \{\par
    const [email, setEmail] = useState('')\par
    const sendEmail = async (e) => \{\par
        e.preventDefault()\par
        const \{data\} = await axios.post('{{\field{\*\fldinst{HYPERLINK http://localhost:5000/reset-password }}{\fldrslt{http://localhost:5000/reset-password\ul0\cf0}}}}\f1\fs16 ', \{email\})\par
        if(data.success)\{\par
            console.log('email send')\par
        \}else\{\par
            console.log(data.message)\par
        \}\par
    \}\par
    return (\par
        <form>\par
            <input type='email' placeholder='enter email' onChange=\{e=>setEmail(e.target.value)\}/>\par
            <button onClick=\{sendEmail\} type='submit'>Submit</button>\par
        </form>\par
    )\par
\}\par
export default ResetPassword\par
\highlight6\b\fs28 SEARCH                                                                                  \par

\pard\sl276\slmult1\highlight5\b0\fs16 backend/router  \par
\highlight0 //  Get all products => /api/v1/products?keyword=apple\par
exports.getProducts =async (req, res, next) => \{\par
    try\{ \par
    const apiFeatures = new APIFeatures(Product.find(), req.query)\par
    .search()\par
    .filter()\par
    const products = await apiFeatures.query\par
    res.status(200).json(\{\par
        success: true,\par
        count:products.length,\par
        products \par
    \})\par
    \}catch(err)\{\par
        res.status(400).json(\{err, success:false, message:'not found..'\})\par
    \}\par
\}\par
\highlight5 backend/utils  \highlight6\b\fs28\par

\pard\ri-1066\sl276\slmult1\highlight0\b0\fs16 class APIFeatures \{\par
    constructor(query, queryStr)\{\par
        this.query = query,\par
        this.queryStr = queryStr\par
    \}\par
    search()\{\par
        const keyword = this.queryStr.keyword ? \{\par
            name: \{\par
                $regex: this.queryStr.keyword,\par
                $options:'i'\par
            \}\par
        \}:\{\}\par
        this.query = this.query.find(\{...keyword\})\par
        return this\par
    \}\par
    filter()\{\par
        const queryCopy = \{...this.queryStr\}\par
        // Removing fields from the query\par
        const removeFields = ['keyword', 'limit', 'page']\par
        removeFields.forEach(el=> delete queryCopy[el])\par
        // Advance filter for price, rating etc\par
        let queryStr = JSON.stringify(queryCopy)\par
\cf1\b\fs18         queryStr = queryStr.replace(/\\b(gt|gte|lt|lte)\\b/g, match=>`$$\{match\}`)\par
\cf0\b0\fs16         this.query = this.query.find(JSON.parse(queryStr))\par
        return this\par
    \}\par
\}\par
module.exports = APIFeatures\par
\highlight6\b\fs28\par
#SLIDER                                                                                 \par
\par
\highlight0\fs16 const Slider = (\{list\}) => \{\par
  const len = list?.length\par
  const [num, setNum] = useState(0)\par
  const [sts, setSts] = useState(true)\par
  const t = useRef(null)\par
\par
  const reset = () => \{\par
    if(t.current)\{\par
      clearTimeout(t.current)\par
    \}\par
  \}\par
  \par
  useEffect(()=>\{ \par
    if(sts)\{\par
      reset()\par
    t.current = setTimeout(() => \{\par
      setNum(prev => prev === len-1?0:prev+1)\par
    \}, 5000)\par
    \}\par
    return () => \{\par
      reset()\par
    \}\par
  \}, [num, sts])\par
  \par
  const r = () => \{\par
    setNum(prev => prev === len-1?0:prev+1)\par
  \}\par
  const l = () => \{\par
    setNum(prev => prev===0? len-1: prev-1)\par
  \}\highlight6\fs22\par
\highlight0\fs16   return (\par
    <div className="slider">\par
      <img src=\{`/uploads/image-show/$\{list[num]?.img\}`\} alt="" />\par
    \par
\par
    <div onMouseOver=\{()=>setSts(false)\} onMouseOut=\{()=>setSts(true)\} className="slider-btns f fcenter">\par
      <span > <Left f=\{l\}/> </span>\par
      <span> <Right f=\{r\}/> </span>\par
    </div>\par
    <div className="s-dots f fcenter">\par
      \{list?.map((e,i)=>(\par
      <button onClick=\{()=>setNum(i)\} className=\{num === i? 's-dot-act':'s-dot'\} key=\{i\}> </button>\par
      ))\}\par
    </div>\par
    \par
  </div>\par
  )\par
\b0 const Scroll = () => \{\par
    const [number, setNumber] = useState(0)\par
    const f = Fotos.length\par
\par
setTimeout(()=>\{\par
        setNumber(number===f-1 ? 0: number+1)\par
    \}, 3000)\par
    const left = ()=>\{\par
        setNumber(number===0? f-1: number-1)\par
    \}\par
    \par
    const right = ()=> \{\par
        setNumber(number===f-1 ? 0: number+1)\par
    \}\par
    const arrow = (event) => \{\par
            if(event.key === 'ArrowRight')\{\par
                setNumber(number===f-1 ? 0: number+1)\par
            \}\par
            if(event.key === 'ArrowLeft')\{\par
                setNumber(number===0? f-1: number-1)\par
            \}\par
    \}\par
    useEffect(()=>\{\cf1\par
        document.addEventListener('keydown',arrow)\par
        return () => \{\par
            document.removeEventListener('keydown',arrow)\par
\cf0         \}\par
\par
    \}, [number])\par
    return (\par
        <Container >\par
                    <h4 onClick=\{left\} style=\{\{position:'absolute', top:'10vh', left:'20px', cursor:'pointer'\}\} >left</h4>\par
                    <h4 onClick=\{right\} style=\{\{position:'absolute', top:'10vh', right:'20px', cursor:'pointer'\}\} >right</h4>\par
                 <img style=\{\{width:'inherit', height:'70vh' \}\} src=\b\fs20\{Fotos[number].image\}\b0\fs16 />\par
        </Container>\par
    )\par
\}\par
export default Scroll\par
\highlight2\b\fs22 CITY LOCATION                                                                                                            \par
{{\field{\*\fldinst{HYPERLINK https://www.bigdatacloud.com/geocoding-apis/reverse-geocode-to-city-api }}{\fldrslt{https://www.bigdatacloud.com/geocoding-apis/reverse-geocode-to-city-api\ul0\cf0}}}}\highlight0\b0\f1\fs16\par
import React, \{useState\} from 'react'\par
import axios from 'axios'\par
const Scroll = () => \{\par
const [err, setErr] = useState()\par
const [city, setCity] = useState()\par
const getPosition =async(e) => \{\par
    const lat = e.coords.latitude\par
    const lon = e.coords.longitude\par
    const \{data\} = await axios.get(`https://api.bigdatacloud.net/data/reverse-geocode?latitude=$\{lat\}&longitude=$\{lon\}&localityLanguage=ru&key=cc258c1d8e1a4469b5fe888dba93bf2f`)\par
    setCity(data.city)\par
\}\par
if (navigator.geolocation) \{\par
    navigator.geolocation.getCurrentPosition(getPosition);\par
  \}else\{\par
      setErr('Location not Found')\par
  \}\par
return (\par
        <div>\par
            Your City is \{city\}\par
        </div>\par
    )\par
\}\par
export default Scroll\par
\highlight6 #INPUT#CHECKBOX                                                                                                                                              \par
\highlight0 // to find out if it's checked or not; returns true or false\par
const checked = e.target.checked;\par
\par
// to get the checked value\par
const checkedValue = e.target.value;\par
\par
// to get the checked name\par
const checkedName = e.target.name;\par
import React, \{useState, useEffect\} from 'react'\par
const Table = () => \{\par
  \par
  const [items, setItems] = useState(\par
    [\{id:'ann', age:5, city:'tver', sts:false\},\{id:'max', age:75, city:'pskov', sts:false\},\{id:'ala', age:35, city:'tulu', sts:false\}]\par
  )\par
  const [all, setAll] = useState(false)\par
\par
  const selAlls = (val) => \{\par
    setAll(val)\par
    setItems(prev =>\{\par
      for(const i of prev)\{\par
        i.sts = val\par
      \}\par
      return prev\par
    \})    \par
  \}\par
\par
  \par
  const toggleItems = (itemname) => \{\par
\par
    setItems(prev =>\{\par
\cf1\b\fs24       const newitems = [...prev]   // !!!!!!!!!!!!??????????????????\par
\cf0\b0\fs16       for(const i in newitems)\{\par
        if(newitems[i].id === itemname)\{\par
          newitems[i].sts = !prev[i].sts\par
        \}\par
      \}\par
      return newitems\par
    \})\par
  \} \par
\par
  const r = () => \{\par
    console.log(items)\par
  \}\par
\par
useEffect(()=>\{\par
for(const i of items)\{\par
  if(i.sts === false)\{\par
    setAll(false)\par
  \}\par
\}\par
\},[items])\par
\par
  return (\par
    <div>\par
      <button onClick=\{r\}>Add</button>\par
      <div className='row'>\par
      <div  className='col-1'><input checked=\{all\} onChange=\{t=>selAlls(t.target.checked)\} type='checkbox'/> All</div>\par
      <div className='col'>Name</div>\par
      <div className='col'>Age</div>\par
      <div className='col'>City</div>\par
      </div>\par
      <br/>\par
      \{items.map(e => (\par
        <div className='row' key=\{e.id\}>\par
        <div className='col-1'><input checked=\{e.sts\} onChange=\{() => toggleItems(e.id, e.sts) \} type='checkbox'/> </div>\par
        <div className='col'>\{e.id\} </div>\par
        <div className='col'>\{e.age\} </div>\par
        <div className='col'>\{e.city\} </div>\par
      </div>\par
      ))\}\par
      \par
    </div>\par
  )\par
\}\par
export default Table\par
import React,\{useState, useEffect\} from 'react'\par
import axios from 'axios'\par
import \{useSelector\} from 'react-redux'\par
\par
\b const Table = () => \{\par
  const token = useSelector(state=>state.loginReducer.user.token)\f2\lang1049                                        \highlight5  \f1\lang1033 axios variant\highlight0\lang9\par
  const [users, setUsers] = useState([])\par
  const [all, setAll] = useState(false)\par
  useEffect(()=> \{\par
  const fetch = async() =>\{\par
    const config = \{headers:\{\par
      'authorization':`Bearer $\{token\}`\par
    \}\}  \par
    const \{data\} = await axios.get('{{\field{\*\fldinst{HYPERLINK http://localhost:5000/api/users }}{\fldrslt{http://localhost:5000/api/users\ul0\cf0}}}}\f1\fs16 ', config)\par
    setUsers(data.map(e=>\{\par
      return \{...e, sts:false\}\par
    \}))\par
  \}\par
  fetch()\par
  \par
\},[token])\par
\par
useEffect(()=>\{\par
  for(const i of users)\{\par
    if(i.sts === false)\{\par
      setAll(false)\par
    \}\par
  \}\par
\},[users])\par
\par
const sellectAll = (status) =>\{\par
  setAll(status)\par
  if(users)\{\par
  setUsers(\par
    users.map((e)=>\{\par
      e.sts = status\par
      return e\par
    \})\par
  )\par
\}\par
\}\par
\par
const tooggleItem = (id)=>\{\par
 if(users)\{\par
  setUsers(users.map(e=>\{\par
    if(e._id === id)\{\par
      e.sts = !e.sts\par
    \}\par
    return e\par
  \}))\par
  \par
 \}\par
\}\par
  return (\par
    <div>\par
      <div className="row">\par
        <div className="col-1"><input checked=\{all\} onChange=\{t=>sellectAll(t.target.checked)\} type='checkbox' /> All</div>     \par
\par
        <div className="col">ID</div>\par
        <div className="col">Name</div>\par
        <div className="col">Email</div>\par
      </div>\par
      <br/>\par
     \{users && users.map(e=>(\par
        <div key=\{e._id\} className="row">\par
        <div className="col-1"><input checked=\{e.sts\} onChange=\{() =>tooggleItem(e._id)\} type='checkbox' /> </div>\par
\par
        <div className="col">\{e._id\}</div>\par
        <div className="col">\{e.name\}</div>\par
        <div className="col">\{e.email\}</div>\par
      </div>\par
     ))\}\par
      \par
    </div>\par
  )\par
\}\par
\par
export default Table\par
\highlight6\b0\fs20 #PAGINATION                                                                                                                                                                         \par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=6DtBw3PaeHs }}{\fldrslt{https://www.youtube.com/watch?v=6DtBw3PaeHs\ul0\cf0}}}}\f1\fs20\par
\highlight0\fs16 import React, \{useState, useEffect\} from 'react'\par
import axios from 'axios'\par
const Pagination = () => \{\par
    const [loading, setLoading] = useState(false)\par
    const [data, setData] = useState([])\par
    const [currentPage, setcurrentPage] = useState(1);\par
    const [itemsPerPage, setitemsPerPage] = useState(5);\par
\par
    const [maxPageLimit, setmaxPageLimit] = useState(5);\par
    const [minPageLimit, setminPageLimit] = useState(1 );\par
\par
    const pages = []\par
\par
    const indexOfLast = currentPage * itemsPerPage\par
    const indexOfFirst = indexOfLast - itemsPerPage\par
    const current = data.slice(indexOfFirst, indexOfLast)\par
\par
    for(let i = 1; i<=Math.ceil(data.length/itemsPerPage);i++)\{\par
        pages.push(i)\par
    \}\par
        useEffect(()=>\{\par
        const fetch =async () => \{\par
            setLoading(true)\par
            try\{\par
                const \{data\} = await axios.get('{{\field{\*\fldinst{HYPERLINK https://jsonplaceholder.typicode.com/todos }}{\fldrslt{https://jsonplaceholder.typicode.com/todos\ul0\cf0}}}}\f1\fs16 ')\par
                setData(data)\par
            \}catch(error)\{\par
                console.log(error)\par
            \}\par
            setLoading(false)\par
        \}\par
        fetch()\par
    \},[])\par
\par
    useEffect(()=>\{\par
        if(currentPage === maxPageLimit && currentPage !== indexOfLast)\{\par
            setmaxPageLimit(maxPageLimit+4)\par
            setminPageLimit(minPageLimit+4)\par
        \}\par
        if(currentPage === minPageLimit && currentPage !== 1)\{\par
            setmaxPageLimit(maxPageLimit-4)\par
            setminPageLimit(minPageLimit-4)\par
        \}\par
    \},[currentPage])\par
\par
    const currentData = (val) => \{\par
        setcurrentPage(val)\par
        \par
    \}\par
    const handleNextbtn =() => \{\par
        setcurrentPage(currentPage + 1)\par
        if(currentPage+2 > maxPageLimit)\{\par
            setmaxPageLimit(maxPageLimit+4)\par
            setminPageLimit(minPageLimit+4)\par
        \}\par
    \}\par
\par
    const handlePrevbtn =() => \{\par
        setcurrentPage(currentPage -1)\par
        if(currentPage-1 < minPageLimit)\{\par
            setmaxPageLimit(maxPageLimit-4)\par
            setminPageLimit(minPageLimit-4)\par
        \}\par
    \}\par
    \par
    const loadMore = () => \{\par
        setitemsPerPage(itemsPerPage + 5)\par
    \}\par
\par
    return (\par
        <div>\par
            <ul>\par
                \{current.map(e => (\par
                    <li key=\{e.id\}>\{e.title\}</li>\par
                ))\}\par
            </ul>\par
                    <button onClick=\{loadMore\}>Load More</button>\par
            <ul  className='page-numbers'>\par
                <button disabled=\{currentPage<2\} onClick=\{handlePrevbtn\} >Prev</button>\par
                    \{pages.length > maxPageLimit && <button>&hellip;</button>\}\par
                \{pages.map(e=>\par
                   e < maxPageLimit+1 && e > minPageLimit-1 ? \par
                        <li className=\{currentPage === e?'active':null\} onClick=\{() => currentData(e)\} key=\{e\}>\{e\}</li>\par
                        : null\par
                )\}\par
                    <button disabled=\{currentPage === pages.length\} onClick=\{handleNextbtn\} >Next</button>\par
            </ul>\par
        </div>\par
    )\par
\}\par
export default Pagination\highlight6\par
#BOOTSTRAP-TABLE-PAGINATOR                                                                                                                   \par
\highlight0 npm i react-bootstrap-table2-paginator react-bootstrap-table-next\par
\highlight6 #\f2\lang1049\'c4\'c8\'cd\'c0\'cc\'c8\'d7\'c5\'d1\'ca\'c0\'df \'cf\'c0\'c3\'c8\'cd\'c0\'d6\'c8\'df \f1\lang9                                                                                                            \par
{\highlight0{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=J2MWOhV8T6o }}{\fldrslt{https://www.youtube.com/watch?v=J2MWOhV8T6o\ul0\cf0}}}}\highlight0\f1\fs16\par
import React, \{useEffect, useState\} from 'react'\par
import axios from 'axios'\par
\par
const HomeScreen = () => \{\par
    const [photos, setPhotos] = useState([])\par
    const [currentPage, setCurrentPage] = useState()\par
    const [fetching, setFetching] = useState(true)\par
    useEffect(()=>\{\par
        document.addEventListener('scroll', scrollF)    \par
        return () => document.addEventListener('scroll',scrollF)\par
    \},[])\par
\par
    useEffect(()=> \{\par
      if(fetching)\{\par
        axios.get(`https://jsonplaceholder.typicode.com/photos?_limit=10&_page=$\{currentPage\}`)\par
        .then(r=>\{setPhotos([...photos, ...r.data])\par
                setCurrentPage(prev => prev +1)\par
        \})\par
        .finally(() => setFetching(false))\par
      \}\par
    \},[fetching])\par
    console.log(photos)\par
    const scrollF = (e) => \{\par
        if(e.target.documentElement.scrollHeight -(e.target.documentElement.scrollTop + window.innerHeight) < 100) \{\par
            console.log('scroll !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')\par
            setFetching(true)\par
        \}\par
\b         console.log('scrollHeight',e.target.documentElement.scrollHeight)   \highlight6 #scroll\highlight0\par
        console.log('scrollTop',e.target.documentElement.scrollTop)\par
        console.log('innerHeight',window.innerHeight)\par
\b0     \}\par
    return (\par
            <div>\par
                \{photos.map(e => \par
                <div key=\{e.id\}>\par
                    <h5 >\{e.id\}</h5>\par
                    <h5 >\{e.title\}</h5>\par
                    <img src=\{e.thumbnailUrl\} alt='img...'/>\par
                </div>\par
                        )\}\par
</div>\par
    )\par
\}\par
\par
export default HomeScreen\par
\highlight6 const x = document.getElementById('scroll4')                                #scroll position of element\par
    console.log(x && x.offsetTop)\fs22\par
\highlight2 #scrollspy                                                                                                                 \par
\highlight0\fs16\par
*\{\par
    scroll-behavior: smooth;\}\par
section \{\par
    position: relative;\par
    width:100%;\par
    height: 100vh;\par
    display:flex;\par
    justify-content: center;\par
    align-items: center;\par
    min-height: 100;\par
\}\par
\par
section:nth-child(even)\{\par
    background:red;\par
\}\par
\par
nav \{\par
    position:fixed;\par
    top:0;\par
    width:100%;\par
    background: yellow;\par
    text-align: center;\par
    z-index: 1;\par
\}\par
\par
nav a \{\par
    position:relative;\par
    color: orange;\par
    text-decoration: none;\par
    padding: 10px 20px;\par
    font-size: 1.6em;\par
    display: inline-block;\par
\}\par
\par
nav a:hover,\par
section#one:hover ~ nav a[href='#one'],\par
section#two:hover ~ nav a[href='#two'],\par
section#three:hover ~ nav a[href='#three'],\par
section#four:hover ~ nav a[href='#four']\par
\{\par
    background:blue;\par
\}\par
\par
::-webkit-scrollbar \{\par
    width:0;\par
\}\par
html:\par
<section id='one'>Section one</section>\par
        <section id='two'>Section two</section>\par
        <section id='three'>Section three</section>\par
        <section id='four'>Section four</section>\par
\par
        <nav>\par
          <a href='#one'>One</a>\par
          <a href='#two'>Two</a>\par
          <a href='#three'>Three</a>\par
          <a href='#four'>Four</a>\par
        </nav>\par
\highlight2\fs22\par
\highlight6\fs24 /* #flip cart */                                                                                                         \fs16\par
\highlight0 .card-container\{\par
    width: 200px;\par
    height: 300px;\par
    background: blue;\par
\}\par
\par
.card\{\par
    width:100%;\par
    height: 100%;\par
    background: pink;\par
    transition: 3s;\par
    transform-style: preserve-3d;\par
\}\par
\par
.card-container:hover .card\{\par
    transform:rotateY(180deg);\par
\}\par
\par
.card .front\{\par
background: green;\par
height:70px;\par
\}\par
\par
.card .back\{\par
background: greenyellow;\par
height:70px;\par
transform: rotateY(180deg);\par
\}\par
\par
.card div\{\par
    width: 100%;\par
    height: 100%;\par
    position: absolute;\par
\}\par
\par
<div className='card-container'>\par
    <div className='card'>\par
      <div className='front'>\par
        front\par
      </div>\par
      <div className='back'>\par
        back\par
      </div>\par
    </div>\par
  </div>\par
\par
\highlight3 #flip#click variant\par
\highlight0 .card \{\par
    background: blue;\par
    transition: .2s ease-in-out;\par
\}\par
\par
.card2 \{\par
    background:green;\par
    transform: rotateY(180deg);\par
    transition: .2s ease-in-out;\par
\}\par
\par
.card2 div \{\par
    color:orange;\par
    transform: rotateY(180deg)\par
\}\par
\par
<div onClick=\{()=> setFlip(e=>!e)\} style=\{\{width:'250px'\}\} className=\{flip?'card':'card2'\}>\par
         \{flip? <div> flip 1</div>:\par
          <div> flip2</div>\}\par
\highlight6\b\fs24 #MAPS                                                                                                   \highlight0\b0\fs16\par

\pard\sl240\slmult1\highlight5 1. Go to google developer \b API CONSOLE                                                  GOOGLE API KEYS\b0\par
2. Click on  \b  +ENABLE API SERVICESS\b0  \par
3.Choose  \b JavaScript Maps Api\b0   and click \b Enable\par
\b0 4. Click on \b Credentials  \b0 => \b   +CREATE CREDENTIALS\par
\b0\lang1033 or watch {{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=1JNwpp5L4vM }}{\fldrslt{https://www.youtube.com/watch?v=1JNwpp5L4vM\ul0\cf0}}}}\f1\fs16\par
\par
\par
{\highlight2{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=gvHb9EzfK7s }}{\fldrslt{https://www.youtube.com/watch?v=gvHb9EzfK7s\ul0\cf0}}}}\highlight2\f1\fs16                                                       MULTIPLE PINPOINTS GOOGLE\par
1.google maps\par
2. Your places\par
3. maps\par
4. create map\par
5. Untitled Layer\par
6. Choose adress\par
7.  Embed on my site\par
8. BASE MAP  TO REMOVE LABELS!!!!!\par
\par
\par
\par
\highlight6 YANDEX \f2\lang1049       -     \'ff\'ed\'e4\'e5\'ea\'f1 \'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f2\'ee\'f0\highlight2\f1\lang1033\par
\highlight5\par
\lang9\par

\pard\ri-1066\sl276\slmult1\highlight6\fs28 #listadd                           {{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=c9oC5qjIiWY }}{\fldrslt{https://www.youtube.com/watch?v=c9oC5qjIiWY\ul0\cf0}}}}\f1\fs28\par
\highlight0\fs16     const [list, setList] = useState([\par
        \{firstName:'u', lastName:'',\},\par
        \{firstName:'u', lastName:'',\},\par
    ])\par
    const handleAdd = () => \{\par
        setList([...list, \{firstName:'', lastName:''\}])\par
    \}\par
    const handleRemove = (index) => \{\par
        if(list.length >1)\{\par
            const list2 = [...list]\par
            list2.splice(index, 1)\par
            setList(list2)\par
        \}\par
    \}\par
\par
    const handleChange = (e, index) => \{\par
        const \{name, value\} = e.target\par
        const list2 = [...list]\par
        list2[index][name] = value\par
        setList(list2)\par
    \}\par
\par
    return (\par
        <div>\par
\par
            \{list.map((x, i) => \par
            \par
            (\par
                    <div key=\{i\} >\par
                        \par
            <input value=\{x.firstName\} name='firstName' onChange=\{e => handleChange(e, i)\}  placeholder='First Name' />\par
            <input  name='lastName' onChange=\{e => handleChange(e,i)\} placeholder='Last Name' />\par
            \{list.length -1 === i &&\par
                            <button onClick=\{handleAdd\}>Add</button>\par
            \}\par
                \{list.length !== 1 &&\par
                            <button onClick=\{() => handleRemove(i)\}>Remove</button>\par
                \}\par
                    </div>\par
            \par
            ))\}\par
            <pre>\par
                \{JSON.stringify(list)\}\par
                </pre>\par
                         \par
        </div>\par
    )\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=zgKH12s_95A }}{\fldrslt{https://www.youtube.com/watch?v=zgKH12s_95A\ul0\cf0}}}}\f1\fs16\par
const [list, setList] = useState([\{\par
        firstName:'', lastName:''\par
    \}])\par
    \par
    const handleChange = (e, i) => \{\par
        const values = [...list]\par
        values[i][e.target.name] = e.target.value\par
        setList(values)\par
    \}\par
\par
    const handleSubmit = (e) => \{\par
        e.preventDefault()\par
        console.log(list)\par
    \}\par
\par
    const handleAdd = () => \{\par
        setList([...list, \{firstName:'', lastName:''\}])\par
    \}\par
\par
    const handleRemove = (i)=> \{\par
        const values = [...list]\par
        values.splice(i,1)\par
        setList(values)\par
    \}\par
\par
    return (\par
        <div>\par
            \{list.map((x, i) => (\par
                <form key=\{i\} onSubmit=\{handleSubmit\} >\par
                    <div>\par
                    <input onChange=\{e => handleChange(e, i)\} name='firstName' value=\{x.firstName\}/>\par
                    <input value=\{x.lastName\} onChange=\{e => handleChange(e, i)\} name = 'lastName' />\par
                \par
                    <button onClick=\{handleAdd\} >Add</button>\par
                    <button onClick=\{() => handleRemove(i)\} >Remove</button>\par
                    </div>\par
                </form>\par
            ))\}\par
\par
            <button onClick=\{handleSubmit\} >Send</button>\par
\par
            \par
            <pre>\par
                \{JSON.stringify(list)\}\par
            </pre>\par
            \par
        </div>\par
    )\par
\par
\highlight6\fs28 #preview#image                                                                      \par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=wiRtugNSVjU }}{\fldrslt{https://www.youtube.com/watch?v=wiRtugNSVjU\ul0\cf0}}}}\highlight0\f1\fs16\par
const hndlChange = (e) => \{\par
setErr(false)\par
const selected = e.target.files[0]\par
const exts = ['image/png', 'image/jpg', 'image/jpeg']\par
\highlight5                                                       or                                      \par
        setPhoto(URL.createObjectURL(e.target.files[0]))                                                       \lang1033 // by http link variant\lang9\par
\tab\tab\tab or                                 \highlight0\par
if(selected && exts.includes(selected.type))\{\par
    let reader = new FileReader()\par
    reader.onloadend = () => \{\par
        setImgPreview(reader.result)\par
    \}\par
    reader.readAsDataURL(selected)\par
\}else\{\par
    setErr(true)\par
    console.log('file not supported')\par
\}\par
\}\par
\par
<input accept='image/*' required  onChange=\{hndlChange\} type='file' id='uphoto' />\par
\highlight1 reader.readAsDataURL(img)\par
            reader.onloadend = () =>\{                                                               #READER\par
                console.log(reader.result)\par
            \}\par
\highlight0\par
\par
\highlight6\fs20 #COMPRESS                              {{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=1WNQxjKHdxw }}{\fldrslt{https://www.youtube.com/watch?v=1WNQxjKHdxw\ul0\cf0}}}}\f1\fs20\par
npm install browser-image-compression --save\par
\highlight0\fs16 const hndlPhoto = async(e) => \{\par
    setErr(false)\par
    const exts = ['image/png', 'image/jpg', 'image/jpeg']\par
    const selected = e.target.files[0]\par
    if(e.target.files[0].size > 1048576)\{\par
        setErr('\f2\lang1049\'d1\'eb\'e8\'f8\'ea\'ee\'ec \'e1\'ee\'eb\'fc\'f8\'ee\'e9 \'f0\'e0\'e7\'ec\'e5\'f0 \'f4\'e0\'e9\'eb\'e0') \}else if(!exts.includes(selected.type))\{\par
            setErr('\'c4\'ee\'ef\'f3\'f1\'f2\'e8\'ec\'fb \'f2\'ee\'eb\'fc\'ea\'ee jpeq, jpg \'e8\'eb\'e8 png \'f4\'e0\'e9\'eb\'fb')\par
                 \}else\{\par
                    console.log('originalFile instanceof Blob', selected instanceof Blob); // true\par
         console.log(`originalFile size $\{selected.size / 1024 / 1024\} MB`);\par
\par
         const options = \{\par
            maxSizeMB: 0.06,    // quality\par
            maxWidthOrHeight: 1920,\par
            useWebWorker: true\par
          \}\par
          try \{\par
            const compressedFile = await imageCompression(selected, options);\par
            console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\par
            console.log(`compressedFile size $\{compressedFile.size / 1024 / 1024\} MB`); // smaller than maxSizeMB\par
        \par
            \par
            let reader = new FileReader()\par
            console.log(e.target.files, 'reader=============')\par
            reader.readAsDataURL(compressedFile)\par
            reader.onloadend = () => \{\par
                setPhoto(reader.result)\par
            \}\par
\par
          \} catch (error) \{\par
            console.log(error);\par
          \}\par
                 \}     \par
\par
\f1\lang1033 or \par
node js\par
{{\field{\*\fldinst{HYPERLINK https://www.npmjs.com/package/imagemin }}{\fldrslt{https://www.npmjs.com/package/imagemin\ul0\cf0}}}}\f1\fs16\par
npm imagemin imagemin-jpegtran imagemin-pngquant\f2\lang1049\par
\par
\par
\highlight6\f1\fs20\lang1033 #LAZY STORAGE                                                                                                                               \par
npm i --save react-lazy-load-image-component\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=0-Ze5dEgVFk }}{\fldrslt{https://www.youtube.com/watch?v=0-Ze5dEgVFk\ul0\cf0}}}}\f1\fs20\par
\highlight0\fs16 import \{ LazyLoadImage \} from 'react-lazy-load-image-component';\par
import 'react-lazy-load-image-component/src/effects/blur.css';\f2\lang1049\par
  \{masters && masters.map(e => (\par
                   <div key=\{e._id\} className='m-rows'>\par
\par
                    <\highlight5 LazyLoadImage\highlight0\par
                    effect='blur'\par
                    height="30px"\par
                    width="30px"\par
                    placeholderSrc='./uploads/manicure_c.jpg'\par
                    src= \{e.photo\} alt='photo'/>\par
\highlight6\f1\fs20\lang1033 #PHONE#MASK                                                                                                                               \par
npm install react-input-mask --save\par
\highlight0\fs16 import InputMask from "react-input-mask"\par
    const [phone, setPhone] = useState('')\par
            <\cf9 InputMask\cf0\par
        value=\{phone\}\par
        mask="+7\\(999) 999-9999"\par
        maskChar=" "\par
        alwaysShowMask =\{true\}\par
        autoFocus\par
      />\par
\highlight6\fs20 #\f2\lang1049\'e7\'e0\'ec\'fb\'ea\'e0\'ed\'e8\'e5                                                                                                                                                                                                      \par
\highlight0\f1\fs16\lang1033 const r = (s) => \{\par
    let x = 0\par
    return  () => \{\par
        return x+=s\par
    \}\par
\}\par
const e = r(5)\par
console.log(e())\par
\fs12\lang9\par
}
 